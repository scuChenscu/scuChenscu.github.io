<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>分布式消息系统-Kafka</title>
      <link href="/2022/12/16/fen-bu-shi-xiao-xi-xi-tong-kafka/"/>
      <url>/2022/12/16/fen-bu-shi-xiao-xi-xi-tong-kafka/</url>
      
        <content type="html"><![CDATA[<h2 id="分布式消息系统-Kafka"><a href="#分布式消息系统-Kafka" class="headerlink" title="分布式消息系统-Kafka"></a>分布式消息系统-Kafka</h2><h4 id="Kafka简介"><a href="#Kafka简介" class="headerlink" title="Kafka简介"></a>Kafka简介</h4><p>Kafka是最初由Linkedin公司开发，是一个分布式、分区的、多副本的、多订阅者，基于zookeeper协调的分布式日志系统或<strong>消息系统</strong>，常见可以用于web/nginx日志、访问日志，消息服务等等，Linkedin于2010年贡献给了Apache基金会并成为顶级开源项目。</p><h4 id="消息系统"><a href="#消息系统" class="headerlink" title="消息系统"></a>消息系统</h4><p>消息系统是解决业务系统或应用系统之间异步通信的中间件，生产者发送包含事件的消息给消息系统，然后消息系统将消息推送给消费者或由消费者从消息系统拉取消息。</p><h5 id="消息系统的作用"><a href="#消息系统的作用" class="headerlink" title="消息系统的作用"></a>消息系统的作用</h5><ul><li><strong>解耦</strong>，消息系统在业务系统处理过程中间插入了一个隐含的、基于数据的接口层，两边业务系统的处理过程都要实现这一接口。这允许你独立的扩展或修改两边业务系统的处理过程，只要确保它们遵守同样的接口约束。</li><li><strong>异步</strong>，很多时候，用户不想也不需要立即处理消息。消息队列提供了异步处理机制，允许用户把消息放入队列，但并不立即处理它，然后在需要的时候再去获取消息消费它们。</li><li><strong>削峰</strong>，在访问量剧增的情况下，应用仍然需要继续发挥作用，但是这样的突发流量并不常见；如果为以能处理这类峰值访问为标准来投入资源随时待命无疑是巨大的浪费。使用消息队列能够使关键组件顶住突发的访问压力，而不会因为突发的超负荷的请求而完全崩溃。</li><li><strong>冗余</strong>，有些情况下，处理数据的过程会失败。除非数据被持久化，否则将造成丢失。消息队列把数据进行持久化到它们已经被完全处理，通过这一方式规避了数据丢失风险。许多消息队列所采用的“插入-获取-删除”范式中，在把一个消息从队列中删除之前，需要你的处理系统明确的指出该消息已经被处理完毕，从而确保你的数据被安全的保存直到你使用完毕。</li><li><strong>缓冲</strong>，在任何重要的系统中，都会有需要不同的处理时间的元素。例如，加载一张图片比应用过滤器花费更少的时间。消息队列通过一个缓冲层来帮助任务最高效率的执行———写入队列的处理会尽可能的快速。该缓冲有助于控制和优化数据流经过系统的速度。</li><li>顺序保证、可扩展性、可恢复性等等。</li></ul><h4 id="Kafka相关术语"><a href="#Kafka相关术语" class="headerlink" title="Kafka相关术语"></a>Kafka相关术语</h4><h5 id="Kafka节点"><a href="#Kafka节点" class="headerlink" title="Kafka节点"></a>Kafka节点</h5><ul><li><strong>Broker</strong>：消息中间件处理结点，一个Kafka节点就是一个broker，多个broker可以组成一个Kafka集群；</li><li><strong>Topic</strong>：类别消息，是一个逻辑概念，例如page view日志、click日志等都可以以topic的形式存在，Kafka集群能够同时负责多个topic的分发；</li><li><strong>Partition</strong>：topic物理上的分组，一个topic可以分为多个partition，每个partition是一个有序的队列，比如关于topic是某页面的click日志，可以根据北京、上海和成都等地区来划分不同的partition；</li><li><strong>Replicas</strong>：partition 的副本，保障 partition 的高可用；</li><li><strong>Segment</strong>：partition物理上由多个segment组成；</li><li><strong>offset</strong>：每个partition都由一系列有序的、不可变的消息组成，这些消息被连续的追加到partition中；partition中的每个消息都有一个连续的序列号叫做offset，用于partition唯一标识一条消息。</li></ul><h5 id="Kafka集群"><a href="#Kafka集群" class="headerlink" title="Kafka集群"></a>Kafka集群</h5><ul><li><strong>Producer</strong>：生产者，即消息发送者，负责 push 消息到 Kafka 集群中的 broker中；</li><li><strong>Consumer</strong>：消费者，从 Kafka 集群的 broker 中 pull 消息、消费消息；</li><li><strong>Consumer group</strong>：high-level consumer API 中，每个 consumer 都属于一个 consumer-group，每条消息只能被 consumer-group 中的一个 Consumer 消费，但可以被多个 consumer-group 消费；</li><li><strong>Leader</strong>：replicas 中的一个角色， producer 和 consumer 只跟 leader 交互；</li><li><strong>Follower</strong>：replicas 中的一个角色，从 leader 中复制数据，作为副本，一旦 leader 挂掉，会从它的 followers 中选举出一个新的 leader 继续提供服务；</li><li><strong>Controller</strong>：Kafka 集群中的其中一个服务器，用来进行 leader election 以及 各种 fail over；</li><li><strong>ZooKeeper</strong>：Kafka 通过 ZooKeeper 来存储集群的 meta 信息等。</li></ul><h4 id="Kafka架构"><a href="#Kafka架构" class="headerlink" title="Kafka架构"></a>Kafka架构</h4><p>如下图所示，基于 Kafka-ZooKeeper 的分布式消息队列系统总体架构包括若干 Producer（消息生产者），若干 broker（作为 Kafka 节点的服务器），若干 Consumer（Group），以及一个 ZooKeeper 集群。Kafka通过 ZooKeeper 管理集群配置、选举 Leader 以及在 consumer group 发生变化时进行 Rebalance（即消费者负载均衡）。Producer 使用 push模式将消息发布到 broker，Consumer 使用 pull模式从 broker 订阅并消费消息。</p><img src="https://babe-song.oss-cn-hangzhou.aliyuncs.com/images/202212161212392.png" alt="Kafka架构" style="zoom:50%;"><p>如下图所示，许多个的brokers组成一个kafka集群，每一个 Topic 被分为多个 Partitions，即物理分区；出于负载均衡考虑，同一个 Topic 的 Partitions 分别存储于 Kafka 集群的多个 broker 上，不同的broker会作为不同 Topic 的 Partitions的leader，Producer 可以通过随机或者 hash 等方式，将消息平均发送到多个 partition 上，以实现负载均衡。</p><img src="https://babe-song.oss-cn-hangzhou.aliyuncs.com/images/202212161212551.png" alt="kafka架构" style="zoom:67%;"><h4 id="Kafka读写机制"><a href="#Kafka读写机制" class="headerlink" title="Kafka读写机制"></a>Kafka读写机制</h4><h5 id="Topic和Partitions"><a href="#Topic和Partitions" class="headerlink" title="Topic和Partitions"></a>Topic和Partitions</h5><p>Kafka将 topic 划分成多个 partition，每个 partition 在存储层面是 append log 文件。任何发布到此 partition 的消息都会被追加到log文件的尾部，每条消息在文件中的位置称为 offset（偏移量），offset 为一个 long 型的数字，它唯一标记一条消息。 Kafka 机制中，producer push 来的消息是追加（append）到 partition 中的，这是一种顺序写磁盘的机制，效率远高于随机写内存，如下图所示：</p><img src="https://babe-song.oss-cn-hangzhou.aliyuncs.com/images/202212161212709.png" alt="顺序写" style="zoom: 33%;"><p>Kafka会根据一定的算法将partition均匀分布到不同的 broker（服务器）上，当 producer 发布消息时，producer 客户端也会根据一定的算法选定目标 partition，将消息推送到目标partition，目标partition再将消息同步到其他brokers相应的partition，partiton 机制可以极大地提高吞吐量，并且使得系统具备良好的水平扩展能力。</p><h5 id="Kafka-文件存储机制"><a href="#Kafka-文件存储机制" class="headerlink" title="Kafka 文件存储机制"></a>Kafka 文件存储机制</h5><p>Kafka 消息是以 topic 进行分类， topic 在物理层面以 partition 为分组，一个 partition 由多个 segment 组成。</p><h6 id="partition文件存储方式"><a href="#partition文件存储方式" class="headerlink" title="partition文件存储方式"></a>partition文件存储方式</h6><img src="https://babe-song.oss-cn-hangzhou.aliyuncs.com/images/202212161212410.png" alt="partition文件存储方式" style="zoom: 33%;"><ul><li>每个partition(目录)相当于一个巨型文件被平均分配到多个大小相等segment(段)数据文件中。但每个段segment file消息数量不一定相等，这种特性方便快速删除old segment file，有效提高磁盘利用率。</li><li>每个partition只需要支持顺序读写即可，Kafka往磁盘上写数据时，就是追加数据，没有随机写的操作，如果一个服务器磁盘达到一定的个数，磁盘也达到一定转数，往磁盘里面顺序写（追加写）数据的速度和写内存的速度差不多。</li></ul><h6 id="partition中segment文件存储结构"><a href="#partition中segment文件存储结构" class="headerlink" title="partition中segment文件存储结构"></a>partition中segment文件存储结构</h6><img src="https://babe-song.oss-cn-hangzhou.aliyuncs.com/images/202212161212706.png" alt="segment文件存储结构" style="zoom:50%;"><ul><li>segment file：由index file和data file两部分一一对应组成，分别表示为“.index”索引文件和“.log”数据文件；</li><li>segment文件命名规则：partition全局的第一个segment从0开始，后续每个segment文件名为上一个segment文件最后一条消息的offset值。</li></ul><p>索引文件存储大量元数据，数据文件存储大量消息，索引文件中元数据指向对应数据文件中message的物理偏移地址。segment index file采取稀疏索引存储方式，它减少索引文件大小，通过mmap可以直接内存操作，稀疏索引为数据文件的每个对应message设置一个元数据指针，它比稠密索引节省了更多的存储空间，但查找起来需要消耗更多的时间。</p><h5 id="Kafka页缓存和零拷贝机制"><a href="#Kafka页缓存和零拷贝机制" class="headerlink" title="Kafka页缓存和零拷贝机制"></a>Kafka页缓存和零拷贝机制</h5><p><strong>页缓存</strong>可以加速数据I/O：写数据时首先写缓存，将写入的页标记为dirty，然后向外部存储flush，也就是缓存写机制中的write-back或者write-through；读数据时首先读取缓存，若未命中，再去外部存储读取，并且将读取来的数据也加入缓存。</p><p><strong>零拷贝</strong>是指数据不需要经由应用程序，直接从磁盘文件复制到网卡。零拷贝大大提高了应用程序的性能，减少了内核和用户模式之间的上下文切换。</p><img src="https://babe-song.oss-cn-hangzhou.aliyuncs.com/images/202212161212226.png" alt="page cache和零拷贝机制" style="zoom:50%;"><h6 id="写message"><a href="#写message" class="headerlink" title="写message"></a>写message</h6><ul><li>消息从Java堆转入page cache(即物理内存)。</li><li>由异步线程刷盘，消息从page cache刷入磁盘。</li></ul><h6 id="读message"><a href="#读message" class="headerlink" title="读message"></a>读message</h6><ul><li>消息直接从page cache转入socket发送出去。</li><li>当从page cache没有找到相应数据时，此时会产生磁盘IO，从磁盘Load消息到page cache，然后直接从socket发出去。</li></ul><p>Kafka主要利用了顺序读写、Page Cache和零拷贝机制保证了它的高性能。</p><h4 id="Kafka消息顺序性"><a href="#Kafka消息顺序性" class="headerlink" title="Kafka消息顺序性"></a>Kafka消息顺序性</h4><ol><li><p>全局有序：一个Topic下的所有消息都需要按照生产顺序消费；</p><ul><li>1个Topic只能对应1个Partition</li><li>对应的consumer使用单线程或者保证消费顺序的线程模型</li></ul></li><li><p>局部有序：一个Topic下的消息，只需要满足同一业务字段的要按照生产顺序消费。例如：Topic消息是订单的流水表，包含订单orderId，业务要求同一个orderId的消息需要按照生产顺序进行消费。</p><ul><li><p>要满足局部有序，只需要在发消息的时候指定Partition Key，Kafka对其进行Hash计算，根据计算结果决定放入哪个Partition。这样Partition Key相同的消息会放在同一个Partition。此时，Partition的数量仍然可以设置多个，提升Topic的整体吞吐量。如下图所示，在不增加partition数量的情况下想提高消费速度，可以考虑再次hash唯一标识（例如订单orderId）到不同的线程上，多个消费者线程并发处理消息（依旧可以保证局部有序）。</p><img src="https://babe-song.oss-cn-hangzhou.aliyuncs.com/images/202212161212505.png" alt="kafka消息顺序性" style="zoom:50%;"></li></ul></li></ol><h4 id="Kafka的特性"><a href="#Kafka的特性" class="headerlink" title="Kafka的特性"></a>Kafka的特性</h4><ul><li><p>高吞吐、低延迟</p><p>（1）page cache（os cache，操作系统管理的缓存），Broker<strong>写数据</strong>只写到缓存就算成功，再由操作系统异步线程刷盘；</p><p>（2）磁盘顺序写，将消息追加到文件末尾，减少磁盘寻址；</p><p>（3）零拷贝，消费数据的时候，直接从os cache到socket，不经过应用层；</p><p>（4）分区并发；Kafka 消息是以 topic 进行分类， topic 在物理层面以 partition 为分组，一个 partition 由多个 segment 组成，即topic分区（文件夹）再分段（文件），每次操作都是针对一小部分做操作，很轻便，<strong>不同的broker会作为不同 Topic 不同Partition的leader</strong>，增加Constomer并行操作和Broker水平扩展的能力；</p><p>（5）批量发送，Kafka允许进行批量发送消息，Producer发送消息的时候，可以将消息缓存在本地，等到了固定条件发送到kafka，可减少IO延迟；但也一定程度上影响了消息的实时性，相当于以时延代价，换取更好的吞吐量；</p><p>（6）数据压缩，Kafka还支持对消息集合进行压缩，Producer可以通过GZIP或Snappy格式对消息集合进行压缩，压缩的好处就是减少传输的数据量，减轻对网络传输的压力。</p></li><li><p>可扩展性、容错性、高并发、可靠性：分布式架构。</p></li><li><p>持久性：消息被持久化到本地磁盘，并且支持数据备份防止数据丢失。</p></li></ul><h4 id="Kafka-高可靠性实现原理"><a href="#Kafka-高可靠性实现原理" class="headerlink" title="Kafka 高可靠性实现原理"></a>Kafka 高可靠性实现原理</h4><p>Kafka 主要采用副本（replication）机制实现高可靠性通过调节副本相关参数，可使 Kafka 在性能和可靠性之间取得平衡。</p><h5 id="Replication机制"><a href="#Replication机制" class="headerlink" title="Replication机制"></a>Replication机制</h5><p>为了提高消息的可靠性，Kafka 每个 topic 的 partition 有 N 个副本（replicas），其中 N（大于等于 1）是 topic 的复制因子（replica fator）的个数。Kafka 通过多副本机制实现故障自动转移，当 Kafka 集群中出现 broker 失效时，副本机制可保证服务可用。对于任何一个 partition，它的 N 个 replicas 中，其中一个 replica 为 leader，其他都为 follower，leader 负责处理 partition 的所有读写请求，follower 则负责被动地去复制 leader 上的数据。如下图所示，Kafka 集群中有 4 个 broker，某 topic 有 3 个 partition，且复制因子即副本个数也为 3：</p><p><img src="https://babe-song.oss-cn-hangzhou.aliyuncs.com/images/202212161212708.png" alt="Replication机制"></p><p>如果 leader 所在的 broker 发生故障或宕机，对应 partition 将因无 leader 而不能处理客户端请求，Zookeeper将会从 follower 中选举出一个新 leader 继续处理客户端的请求。</p><h5 id="选举Leader"><a href="#选举Leader" class="headerlink" title="选举Leader"></a>选举Leader</h5><p>一个 partition 有多个副本（replicas），为了提高可靠性，这些副本分散在不同的 broker 上，由于带宽、读写性能、网络延迟等因素，同一时刻，这些副本的状态通常是不一致的：即 followers 与 leader 的状态不一致。 Kafka 机制中，leader 将负责维护和跟踪一个 ISR（In-Sync Replicas）列表，即同步副本队列，这个列表里面的副本与 leader 保持同步，状态一致。新的 leader 从将会从 ISR 列表中的副本中选出。</p><h5 id="同步副本ISR"><a href="#同步副本ISR" class="headerlink" title="同步副本ISR"></a>同步副本ISR</h5><p>虽然同步副本队列 ISR（In-Sync Replicas）极大的增强了可用性，但是副本数量对 Kafka 的吞吐率有一定影响。默认情况下 Kafka 的 replica 数量为 1，即每个 partition 都只有唯一的 leader，无 follower，没有容灾能力。为了确保消息的可靠性，生产环境中，通常将其值大小设置为大于 1，比如 3。 所有的副本（replicas）统称为 Assigned Replicas，即 AR。ISR 是 AR 中的一个子集，由 leader 维护 ISR 列表，follower 从 leader 同步数据会有延迟，超过系统设定超时阈值的 follower 将被剔除出 ISR， 存入 OSR（Outof-Sync Replicas）列表，新加入的 follower 也会先存放在 OSR 中，即AR = ISR + OSR。</p><h5 id="数据可靠性和持久性保证"><a href="#数据可靠性和持久性保证" class="headerlink" title="数据可靠性和持久性保证"></a>数据可靠性和持久性保证</h5><p>当 producer 向 leader 发送数据时，Kafka有三种不同的数据可靠性级别：</p><ul><li><p><strong>request.required.acks = 1</strong>，这是默认情况，即：producer 发送数据到 leader，leader 写本地日志成功，返回客户端成功；此时 ISR 中的其它副本还没有来得及拉取该消息，如果此时 leader 宕机了，那么此次发送的消息就会丢失。</p></li><li><p><strong>request.required.acks = 0</strong>，producer 不停向leader发送数据，而不需要 leader 反馈成功消息，这种情况下数据传输效率最高，但是数据可靠性确是最低的。可能在发送过程中丢失数据，可能在 leader 宕机时丢失数据。</p></li><li><p><strong>request.required.acks = -1（all）</strong>，producer 发送数据给 leader，leader 收到数据后要等到 ISR 列表中的所有副本（可以调整副本数来提高系统的性能）都同步数据完成后（强一致性），才向生产者返回成功消息，如果一直收不到成功消息，则认为发送数据失败会自动重发数据。这是可靠性最高的方案，当然，性能也会受到一定影响。</p></li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>Kafka是基于Java实现的消息系统，它具有以下特点：</p><ul><li>可扩展性，由Zookeeper管理，多个brokers组成的Kafka集群具有很强的可扩展性；</li><li>可靠性，Kafka通过分布式集群、数据冗余和持久化机制保证了它的高可靠性；</li><li>高性能；Kafka采用分区设计提高了它的吞吐量，并且通过顺序读写、页缓存和零拷贝等机制保证了它的高性能。</li></ul><h4 id="为什么选择Kafka"><a href="#为什么选择Kafka" class="headerlink" title="为什么选择Kafka"></a>为什么选择Kafka</h4><ul><li>Kafka是一个分布式流媒体平台，用于发布和订阅记录流。Kafka用于容错存储。</li><li>Kafka将主题日志分区复制到多个服务器。Kafka旨在让您的应用程序处理记录。</li><li>Kafka速度很快，通过批处理和压缩记录来高效地使用IO。Kafka用于解耦数据流。</li><li>Kafka用于将数据流式传输到数据池，应用程序和实时流分析系统。</li></ul><h4 id="Mafka"><a href="#Mafka" class="headerlink" title="Mafka"></a>Mafka</h4><p>Mafka一个基于Kafka开发的一个分布式消息中间件综合解决方案。</p><h4 id="Mafka架构"><a href="#Mafka架构" class="headerlink" title="Mafka架构"></a>Mafka架构</h4><img src="https://babe-song.oss-cn-hangzhou.aliyuncs.com/images/202212161212068.png" alt="Mafka架构" style="zoom:50%;"><p><a href="https://blog.csdn.net/lizhitao/article/details/44858217">Mafka平台架构</a></p><p>Mafka-client：发送和接收消息</p><p>Mafka-manager：管理集群</p><p>Mafka-monitor：监控</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 研发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/12/15/hello-world/"/>
      <url>/2022/12/15/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>README</title>
      <link href="/2022/12/14/readme/"/>
      <url>/2022/12/14/readme/</url>
      
        <content type="html"><![CDATA[<p>一直以来就很想搭建一个博客，在博客上分享自己的一些经历、思考或者是技术上的沉淀。</p><p>但是很懒，不想亲自从0开始搭建，又没有找到满意的模板，就搁置了。</p><p>今天在检索Generalizable Approximate Partitionin论文时，看到了一位老哥的<a href="https://muyuuuu.github.io/">博客</a></p><p>他是基于hexo搭建的，然后部署在github上，hexo的主题尚不能满足我的需求，所以打算像这位老哥一样，基于hexo去定制自己的博客，这个不强求吧，主要还是得先丰富内容。</p><p>以后尽可能地在博客上输出，不管是什么方面，就当是为自己的过去留下痕迹。</p><p>还有一点就是相比于CSDN、微信公众号等等平台，自己的博客更加自由，我很少在CSDN上写博客，一是不想灌水、二是害怕学而不精、误人子弟；在自己的博客就不需要顾虑太多东西，错了就以后慢慢填坑嘛</p><p>除了技术，也希望可以在博客上分享一下生活、或者是看法，在这里就是我的天地，不需要顾虑太多东西，😂</p><p>加油加油加油</p>]]></content>
      
      
      <categories>
          
          <category> README </category>
          
      </categories>
      
      
        <tags>
            
            <tag> README </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Redis的POI搜索</title>
      <link href="/2022/09/16/ji-yu-redis-de-poi-sou-suo/"/>
      <url>/2022/09/16/ji-yu-redis-de-poi-sou-suo/</url>
      
        <content type="html"><![CDATA[<h1 id="基于Redis的POI搜索"><a href="#基于Redis的POI搜索" class="headerlink" title="基于Redis的POI搜索"></a>基于Redis的POI搜索</h1><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><h5 id="Redis的简介"><a href="#Redis的简介" class="headerlink" title="Redis的简介"></a>Redis的简介</h5><p>Redis（Remote DIctionary Server，远程字典服务）；是一个使用ANSIC编写的开源、支持网络、基于内存、分布式、可选持久性的键值对存储数据库。</p><h4 id="Redis的特点"><a href="#Redis的特点" class="headerlink" title="Redis的特点"></a>Redis的特点</h4><ol><li><p>基于内存的数据库，读写速度快；读的速度是 110000 次/s,写的速度是 81000 次/s</p></li><li><p>支持多种数据结构；string（字符串），hash（哈希），list（列表），set（集合）及 zsetsorted set：有序集合)；HyperLogLog、Geo、Pub/Sub</p></li><li><p>支持持久化操作，支持用 AOF 和 RDB 两种数据持久化策略把数据持久化到磁盘；</p></li><li><p>单线程请求，并发请求情况下不需要考虑数据一致性问题；Redis 利用队列技术将并发访问变为串行访问，消</p><p>除了传统数据库串行控制的开销</p></li><li><p>支持发布与订阅的消息机制；</p></li><li><p>支持哨兵机制和redis cluster高可用方式；</p></li><li><p>支持简单事务；</p></li><li><p>原子性；通过 MULTI 和 EXEC指令包起来</p></li></ol><h4 id="Redis数据类型"><a href="#Redis数据类型" class="headerlink" title="Redis数据类型"></a>Redis数据类型</h4><p><a href="https://pdai.tech/md/db/nosql-redis/db-redis-x-redis-ds.html">Redis进阶 - 数据结构：底层数据结构详解</a></p><ol><li><p>String: 字符串</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">sdshdr</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> len<span class="token punctuation">;</span><span class="token comment">//记录buf数组已使用的长度，即SDS的长度(不包含末尾的'\0')</span>  <span class="token keyword">int</span> free<span class="token punctuation">;</span><span class="token comment">//记录buf数组中未使用的长度，分配空间时会预留额外的空间，减少扩容</span>  <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//字节数组，用来保存字符串</span><span class="token punctuation">}</span><span class="token comment">// （1）len O(1) （2）不需要'\0'判断结束计算长度，可以存储各种二进制数据（3）杜绝缓冲区溢出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://babe-song.oss-cn-hangzhou.aliyuncs.com/images/202212161501510.png" alt="String数据结构"></p><ul><li>常数级获取字符串长度</li><li>二进制安全，不需要’\0’判断结束计算长度，可以存储各种二进制数据</li><li>杜绝缓冲区溢出，修改时先判断空间是否足够，否则先扩容至所需大小，再写入</li><li>减少修改字符串时空间再分配次数；（1）预分配（2）惰性空间释放</li><li>兼容部分C字符串函数，虽然SDS的API都是二进制安全的，但他们一样遵循C字符串以空字符串结尾的惯例，并且总会在为buf数组分配空间时，多分配一个字节来容纳这个空字符，这是为了让那些保存文本数据的SDS可以重用一部分&lt;string.h&gt;库定义的函数。</li></ul></li><li><p>Hash: 散列</p></li><li><p>List: 列表，应用场景：消息队列</p><p>redis list数据结构底层采用压缩列表ziplist或linkedlist两种数据结构进行存储，首先以ziplist进行存储，在不满足ziplist的存储要求后转换为linkedlist列表。<br> <strong>当列表对象同时满足以下两个条件时，列表对象使用ziplist（entry紧挨在一起）进行存储，否则用linkedlist（双向链表）存储。</strong></p><ul><li>列表对象保存的所有字符串元素的长度小于64字节</li><li>列表对象保存的元素数量小于512个</li></ul></li><li><p>linkedList</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span>  <span class="token keyword">struct</span> <span class="token class-name">listNode</span> <span class="token punctuation">{</span>    <span class="token comment">// 前置节点</span>  <span class="token keyword">struct</span> <span class="token class-name">listNode</span> <span class="token operator">*</span>prev；  <span class="token comment">// 后置节点</span>  <span class="token keyword">struct</span> <span class="token class-name">listNode</span> <span class="token operator">*</span>next；  <span class="token comment">// 节点的值</span>  <span class="token keyword">void</span> <span class="token operator">*</span>value； <span class="token comment">// 任何类型的指针都可以直接赋值给 void 指针，不需要强制类型转换</span><span class="token punctuation">}</span>listNode<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">list</span> <span class="token punctuation">{</span>    listNode <span class="token operator">*</span>head<span class="token punctuation">;</span>    listNode <span class="token operator">*</span>tail<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>dup<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>free<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>match<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> len<span class="token punctuation">;</span><span class="token punctuation">}</span> list<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://babe-song.oss-cn-hangzhou.aliyuncs.com/images/202212161501716.png" alt="linkedList"></p><p>listNode 中使用了一个 void 类型的指针（void *value）保存其内存，由于链表内部并不知道 value 保存的内容的真实情况， 因此需要用户指定三个函数用于处理这个 value，这三个函数分别是：</p><ul><li>dup 复制一个 value，若没有提供此函数，链表内部在需要复制的时候直接复制 value 指针的值</li><li>free 释放一个 value，若没有提供此函数，则不进行 free 操作</li><li>match 比较两个 value 的值，返回非 0 值表示两个 value 相等，若不提供此函数则直接比较两个 value 指针是否相等</li></ul><p><strong>结构特点：</strong></p><ul><li>链表被广泛用于实现Redis各种功能，比如列表键、发布订阅、慢查询、监视器等。</li><li>每个链表节点由一个listNode结构来表示，每个节点都有一个指向前置节点和后置节点的指针，所以Redis的链表是一个双向链表。</li><li>每个链表使用一个list结构来表示，这个结构带有表头节点指针、表尾节点指针，以及链表长度等信息。</li><li>因为链表表头节点的前置节点和表尾的后置节点都指向NULL，所以Redis的链表实现是无环链表。</li><li>通过尾链表设置不同的类型特定函数，Redis的链表可以用于保存各种不同类型值。</li></ul></li><li><p>Set: 集合（dict）</p></li><li><p>Sorted Set: 有序集合（跳表）</p></li><li><p>Dict：字典</p><p>字典主要包含三个结构体：dict，dictht，dictEntry；一个dict有2个hashtable，hashtable包含了dictEntry数组，dictEntry使用链地址法处理冲突；</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">dict</span> <span class="token punctuation">{</span> <span class="token comment">// 字典</span> <span class="token comment">// 特定于类型的处理函数</span>dictType <span class="token operator">*</span>type<span class="token punctuation">;</span><span class="token comment">// 类型处理函数的私有数据</span><span class="token keyword">void</span> <span class="token operator">*</span>privdata<span class="token punctuation">;</span><span class="token comment">// 2个哈希表，ht[0]存数据，ht[1]只有在ht[0]rehash时使用</span>dictht ht<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 记录 rehash 进度的标志，值为 -1 表示 rehash 未进行</span><span class="token keyword">int</span> trehashidx<span class="token punctuation">;</span><span class="token comment">// 当前正在运作的安全迭代器数量</span>  <span class="token keyword">int</span> iterators<span class="token punctuation">;</span><span class="token punctuation">}</span>dict<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">dictht</span><span class="token punctuation">{</span> <span class="token comment">// 哈希表</span> <span class="token comment">// 哈希表节点数组</span>dictEntry <span class="token operator">*</span><span class="token operator">*</span>table<span class="token punctuation">;</span><span class="token comment">// 哈希表大小</span>  unsigend <span class="token keyword">long</span> size<span class="token punctuation">;</span>  <span class="token comment">// 哈希表大小掩码，总是等于size-1，用于hash算法计算索引值</span>  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> sizemask<span class="token punctuation">;</span> <span class="token comment">// hash(key) &amp; sizemask </span>  <span class="token comment">// 该哈希表已有节点的数量</span>  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> used<span class="token punctuation">;</span><span class="token punctuation">}</span>dictht<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">dictEntry</span> <span class="token punctuation">{</span> <span class="token comment">// 哈希表节点</span>  <span class="token comment">// 键</span>  <span class="token keyword">void</span> <span class="token operator">*</span>key<span class="token punctuation">;</span>  <span class="token comment">// 值</span>  <span class="token keyword">union</span> <span class="token punctuation">{</span>     <span class="token keyword">void</span> <span class="token operator">*</span>val<span class="token punctuation">;</span>     <span class="token class-name">uint64_t</span> u64<span class="token punctuation">;</span>     <span class="token class-name">int64_t</span> s64<span class="token punctuation">;</span>  <span class="token punctuation">}</span>v<span class="token punctuation">;</span>  <span class="token comment">// 指向下个哈希表节点，形成链表（拉链法解决冲突）</span>  <span class="token keyword">struct</span> <span class="token class-name">dictEntry</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span>dictEntry<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://babe-song.oss-cn-hangzhou.aliyuncs.com/images/202212161501971.png" alt="Dict数据结构"></p><p><strong>结构特点：</strong></p><ul><li>Redis中的字典使用哈希表作为底层实现，每个字典带有两个哈希表，一个平时使用，一个rehash时使用</li><li>当字典作为数据库的底层实现，或者哈希键的底层实现时，Redis使用MurmurHash2算法来计算键的哈希值</li><li>哈希表使用链地址法解决冲突</li><li>在对哈希表进行扩展或者收缩操作时，程序需要将现有哈希表包含的所有键值对rehash到新哈希表里面，并且这个rehash过程不是一次性完成的，而是渐进式完成的</li></ul></li><li></li></ol><h4 id="缓存问题"><a href="#缓存问题" class="headerlink" title="缓存问题"></a>缓存问题</h4><ul><li><p>缓存雪崩：同一时间缓存大量的key过期（定期删除策略）；（1）key失效时间 + 随机值（2）热点数据永不过期（脏数据）</p></li><li><p>缓存击穿：某个热点key在高并发期间过期；（1）热点数据永不过期（2）互斥锁，保证只有一个请求到数据库去数据写回缓存；</p><img src="https://babe-song.oss-cn-hangzhou.aliyuncs.com/images/20220421221450.awebp" alt="获取数据" style="zoom:50%;"></li><li><p>缓存穿透：（透）缓存和数据库都不存在的key；永远不要相信调用方，（1）在接口层做参数检验（2）对不存在的key设置value为null，防止恶意攻击。</p></li></ul><h4 id="Redis持久化"><a href="#Redis持久化" class="headerlink" title="Redis持久化"></a>Redis持久化</h4><ul><li><p>RDB持久化（Redis DataBase）<strong>snapshotting</strong>：Redis周期性地为引擎中保存的数据创建快照，生成RDB文件，保存到磁盘中，实现数据的持久化。RDB文件占用空间小，便于移动，非常适合用于备份或迁移指定时间点的Redis数据。（默认持久化方式，可能会丢数据）</p><ul><li>优点<ol><li>只有一个文件 dump.rdb，方便持久化</li><li>容灾性好，一个文件可以保存到安全的磁盘</li><li>性能最大化，fork 子进程来完成写操作，让主进程继续处理命令，所以是 IO最大化。使用单独子进程来进行持久化，主进程不会进行任何 IO 操作，保证了 redis的高性能) 4.相对于数据集大时，比 AOF 的启动效率更高。</li></ol></li><li>缺点<ol><li>数据安全性低。RDB 是间隔一段时间进行持久化，如果持久化之间 redis 发生故障，会发生数据丢失。所以这种方式更适合数据要求不严谨的时候)</li></ol></li></ul></li><li><p>AOF持久化<strong>append-only file</strong>：Redis以日志的形式记录所有的写操作，服务重启时，Redis可以重新执行AOF文件中的操作来恢复数据。当AOF文件过大时，原生Redis会自动执行AOF Rewrite，重组AOF文件，降低其占用的存储空间。</p><ul><li><p>优点</p><p>1、数据安全，aof 持久化可以配置 appendfsync 属性，有 always，每进行一次命令操作就记录到 aof 文件中一次。</p><p>2、通过 append 模式写文件，即使中途服务器宕机，可以通过 redis-check-aof工具解决数据一致性问题。</p><p>3、AOF 机制的 rewrite 模式。AOF 文件没被 rewrite 之前（文件过大时会对命令进行合并重写），可以删除其中的某些命令（比如误操作的 flushall）)</p></li><li><p>缺点</p><p>1、AOF 文件比 RDB 文件大，且恢复速度慢。</p><p>2、数据集大的时候，比 rdb 启动效率低。</p></li></ul><p><strong>一个快照，一个日志</strong></p></li></ul><h4 id="删除策略"><a href="#删除策略" class="headerlink" title="删除策略"></a>删除策略</h4><ul><li>定时删除：在设置键的过期时间时，创建一个定时器，当到达键过期时间时通过定时器去删除键；对内存友好，对CPU不友好；</li><li>惰性删除：惰性删除并不是当到达过期时间时去删除，而是每次获取键时，会判断是否过期，如果过期则删除，并返回空；没过期，就返回键值；对CPU友好，对内存不友好；</li><li>定期删除：每隔一段时间执行一次删除过期键操作，并通过限制删除操作执行的<strong>时长</strong>和<strong>频率</strong>来减少删除操作对CPU时间的影响。</li></ul><p><a href="https://zhuanlan.zhihu.com/p/378412064">Redis实际使用的是惰性删除+定期删除的策略</a></p><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><h5 id="布隆过滤器"><a href="#布隆过滤器" class="headerlink" title="布隆过滤器"></a>布隆过滤器</h5><h6 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h6><p>Bitmaps，一种数据结构，是由一串很长的二进制向量组成，可以将其看成一个二进制数组。既然是二进制，那么里面存放的不是0，就是1，但是初始默认值都是0；用于快速判断某个数据是否在大数据量集合中，并且不占用内存。</p><h6 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h6><p>写入数据：将布隆过滤器看成一个容器，当要向布隆过滤器中添加一个元素key时，我们通过<strong>多个hash函数</strong>，算出<strong>多个值</strong>，然后将这些值所在bit置为1。</p><p>判断数据存在：多个hash(key)对应的bit全为1，数据可能存在，不全为1，数据一定不存在。</p><p>优点：内存少，速度快；缺点：数据多，误判高，无法删除数据。</p><h5 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h5><p>分布式锁特性：</p><ul><li>互斥性、独占性</li><li>防止锁超时</li></ul><p>核心：（1）加锁，原子性：SETNX key expire value，加锁的同时设置过期时间和value与持有者（线程ID）相关（2）解锁，lua脚本保证原子性，根据value判断是否为锁的持有者，del key解锁（3）锁超时自动释放，持有锁的线程开启守护线程，为即将过期但未释放的锁增加有效时间。（4）其他线程长时间等待锁，轮询或获得锁失败时订阅锁释放消息（5）单机宕机，集群                   <a href="https://xiaomi-info.github.io/2019/12/17/redis-distributed-lock/">Redis分布式锁</a></p><h4 id="Redis模式"><a href="#Redis模式" class="headerlink" title="Redis模式"></a>Redis模式</h4><p>单机-&gt;主从（主从复制，主负责读写，从负责读）-&gt;哨兵（哨兵节点监控数据节点，自动化的故障恢复）-&gt;集群（分布式存储，每个节点存储不一样的数据，hash slot，可扩展性强，高可用性）</p><h4 id="Redis为什么快？"><a href="#Redis为什么快？" class="headerlink" title="Redis为什么快？"></a>Redis为什么快？</h4><img src="https://babe-song.oss-cn-hangzhou.aliyuncs.com/images/202212161501248.png" alt="I/O多路复用" style="zoom:67%;"><p><a href="https://cloud.tencent.com/developer/article/1745894">https://cloud.tencent.com/developer/article/1745894</a></p><img src="https://babe-song.oss-cn-hangzhou.aliyuncs.com/images/202212161501376.png" alt="Redis快的原因" style="zoom:50%;"><h4 id="Redis如何判断数据过期"><a href="#Redis如何判断数据过期" class="headerlink" title="Redis如何判断数据过期"></a>Redis如何判断数据过期</h4><p>删除策略+过期字典+内存淘汰机制（Out of memory时触发）+ 持久化</p><p>最常用的数据淘汰策略：allkeys-lru（<strong>least recently used</strong>）：当内存不⾜以容纳新写⼊数据时，在键空间中，移除最近最少使⽤的 key。</p><p><img src="https://babe-song.oss-cn-hangzhou.aliyuncs.com/images/202212161501676.png" alt="redis过期字典"></p><img src="https://babe-song.oss-cn-hangzhou.aliyuncs.com/images/202212161501766.png" alt="20220421221509"><h4 id="数据一致性问题"><a href="#数据一致性问题" class="headerlink" title="数据一致性问题"></a>数据一致性问题</h4><p>核心：（1）缓存和数据库数据不一致（2）只要数据可变，必然会存在不一致的情况（3）保证最终一致性</p><p>策略：先写缓存或者先写数据库</p><p><img src="https://babe-song.oss-cn-hangzhou.aliyuncs.com/images/202212161501928.png" alt="数据一致性问题"></p><p><a href="https://blog.51cto.com/u_15358844/4557564"><strong>更新缓存的正确姿势（先更新缓存还是先更新数据库）</strong></a></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 异步双删</span>cache<span class="token punctuation">.</span>deletedb<span class="token punctuation">.</span>updateasynchronousCache<span class="token punctuation">.</span>delete<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Redis-GEO"><a href="#Redis-GEO" class="headerlink" title="Redis GEO"></a>Redis GEO</h4><h5 id="Redis-GEO简介"><a href="#Redis-GEO简介" class="headerlink" title="Redis GEO简介"></a>Redis GEO简介</h5><p>Redis GEO 主要用于存储地理位置信息，并对存储的信息进行操作，该功能在 Redis 3.2 版本新增。</p><h5 id="Redis-GEO操作方法"><a href="#Redis-GEO操作方法" class="headerlink" title="Redis GEO操作方法"></a>Redis GEO操作方法</h5><ol><li>geoadd：添加地理位置的坐标；</li><li>geopos：获取地理位置的坐标；</li><li>geodist：计算两个位置之间的距离；</li><li>georadius：根据用户给定的经纬度坐标来获取指定范围内的地理位置集合；</li><li>georadiusbymember：根据储存在位置集合里面的某个地点获取指定范围内的地理位置集合；</li><li>geohash：返回一个或多个位置对象的 geoHash 值；</li></ol><h2 id="POI（Point-of-Interest）"><a href="#POI（Point-of-Interest）" class="headerlink" title="POI（Point of Interest）"></a>POI（Point of Interest）</h2><h4 id="POI简介"><a href="#POI简介" class="headerlink" title="POI简介"></a>POI简介</h4><p>兴趣点（Point of Interest，POI）乃是电子地图上任何非地理意义的有意义的点，用以标示出该地所代表的政府部门、各行各业之商业机构（加油站、百货公司、超市、餐厅、酒店、便利商店、医院等）、旅游景点（公园、公共厕所等）、古迹名胜、交通设施（各式车站、停车场、超速照相机、速限标示）等处所。由于兴趣点必须包含名称、类别、经度、纬度等资料才能在电子地图上呈现，因此亦翻译成信息点。</p><h4 id="POI搜索"><a href="#POI搜索" class="headerlink" title="POI搜索"></a>POI搜索</h4><p>根据指定关键字或指定范围搜索POI，返回结果通常包含：名称、类别、经度、纬度、地址等详细信息；</p><h2 id="Redis-GEO与POI搜索"><a href="#Redis-GEO与POI搜索" class="headerlink" title="Redis GEO与POI搜索"></a>Redis GEO与POI搜索</h2><h4 id="Redis-GEO实现POI搜索原理"><a href="#Redis-GEO实现POI搜索原理" class="headerlink" title="Redis GEO实现POI搜索原理"></a>Redis GEO实现POI搜索原理</h4><p>Redis GEO常应用于实现周边POI搜索：</p><ol><li>预先获取、整理、标注POI数据；</li><li>使用geoadd函数将POI数据写入Redis；</li><li>根据用户的经纬度信息使用georadius函数获取指定范围内的目标POI集合；</li></ol><h4 id="geoadd实现原理"><a href="#geoadd实现原理" class="headerlink" title="geoadd实现原理"></a>geoadd实现原理</h4><h5 id="geoadd命令用法"><a href="#geoadd命令用法" class="headerlink" title="geoadd命令用法"></a>geoadd命令用法</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c">GEOADD key longitude latitude member <span class="token punctuation">[</span>longitude latitude member <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将给定的位置对象（纬度、经度、名字）添加到指定的key。其中，<code>key</code>为集合名称，<code>member</code>为该经纬度所对应的对象。在实际运用中，当所需存储的对象数量过多时，可通过设置多<code>key</code>(如一个省一个<code>key</code>)的方式对对象集合变相做<code>sharding</code>，避免单集合数量过多。</p><h5 id="geoadd源码分析"><a href="#geoadd源码分析" class="headerlink" title="geoadd源码分析"></a>geoadd源码分析</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* GEOADD key long lat name [long2 lat2 name2 ... longN latN nameN] */</span><span class="token keyword">void</span> <span class="token function">geoaddCommand</span><span class="token punctuation">(</span>client <span class="token operator">*</span>c<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//参数校验</span>    <span class="token comment">/* Check arguments number for sanity. */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c<span class="token operator">-&gt;</span>argc <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">/* Need an odd number of arguments if we got this far... */</span>        <span class="token function">addReplyError</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token string">"syntax error. Try GEOADD key [x1] [y1] [name1] "</span><span class="token string">"[x2] [y2] [name2] ... "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">//参数提取Redis</span>    <span class="token keyword">int</span> elements <span class="token operator">=</span> <span class="token punctuation">(</span>c<span class="token operator">-&gt;</span>argc <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> argc <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">+</span>elements<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">/* ZADD key score ele ... */</span>    robj <span class="token operator">*</span><span class="token operator">*</span>argv <span class="token operator">=</span> <span class="token function">zcalloc</span><span class="token punctuation">(</span>argc<span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>robj<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">createRawStringObject</span><span class="token punctuation">(</span><span class="token string">"zadd"</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token operator">-&gt;</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">/* key */</span>    <span class="token function">incrRefCount</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//参数遍历+转换</span>    <span class="token comment">/* Create the argument vector to call ZADD in order to add all     * the score,value pairs to the requested zset, where score is actually     * an encoded version of lat,long. */</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> elements<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">double</span> xy<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//提取经纬度</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">extractLongLatOrReply</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token punctuation">(</span>c<span class="token operator">-&gt;</span>argv<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>i<span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>xy<span class="token punctuation">)</span> <span class="token operator">==</span> C_ERR<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> argc<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">decrRefCount</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">zfree</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//将经纬度转换为52位的geohash作为分值 &amp; 提取对象名称</span>        <span class="token comment">/* Turn the coordinates into the score of the element. */</span>        GeoHashBits hash<span class="token punctuation">;</span>        <span class="token function">geohashEncodeWGS84</span><span class="token punctuation">(</span>xy<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> xy<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> GEO_STEP_MAX<span class="token punctuation">,</span> <span class="token operator">&amp;</span>hash<span class="token punctuation">)</span><span class="token punctuation">;</span>        GeoHashFix52Bits bits <span class="token operator">=</span> <span class="token function">geohashAlign52Bits</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span><span class="token punctuation">;</span>        robj <span class="token operator">*</span>score <span class="token operator">=</span> <span class="token function">createObject</span><span class="token punctuation">(</span>OBJ_STRING<span class="token punctuation">,</span> <span class="token function">sdsfromlonglong</span><span class="token punctuation">(</span>bits<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        robj <span class="token operator">*</span>val <span class="token operator">=</span> c<span class="token operator">-&gt;</span>argv<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">+</span> i <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//设置有序集合的对象元素名称和分值</span>        argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">+</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> score<span class="token punctuation">;</span>        argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token operator">+</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span>        <span class="token function">incrRefCount</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">//调用zadd命令，存储转化好的对象</span>    <span class="token comment">/* Finally call ZADD that will do the work for us. */</span>    <span class="token function">replaceClientCommandVector</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>argc<span class="token punctuation">,</span>argv<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">zaddCommand</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过源码分析可以看出Redis内部使用有序集合(zset)保存位置对象，有序集合中每个元素都是一个带位置的对象，元素的score值为其经纬度对应的52位的geohash值。</p><h5 id="geoadd命令步骤总结："><a href="#geoadd命令步骤总结：" class="headerlink" title="geoadd命令步骤总结："></a>geoadd命令步骤总结：</h5><ol><li>参数提取和校验；</li><li>将入参经纬度转换为52位的GeoHash值（score）；</li><li>调用ZADD命令将member及其对应的score存入集合key中。</li></ol><h4 id="georadius实现原理"><a href="#georadius实现原理" class="headerlink" title="georadius实现原理"></a>georadius实现原理</h4><h5 id="georadius命令用法"><a href="#georadius命令用法" class="headerlink" title="georadius命令用法"></a>georadius命令用法</h5><pre class="line-numbers language-none"><code class="language-none">GEORADIUS key longitude latitude radius m|km|ft|mi [WITHCOORD] [WITHDIST] [WITHHASH] [ASC|DESC] [COUNT count] [STORE key] [STORedisT key]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以给定的经纬度为中心，返回目标集合中与中心的距离不超过给定最大距离的所有位置对象。</p><h5 id="georadius源码分析"><a href="#georadius源码分析" class="headerlink" title="georadius源码分析"></a>georadius源码分析</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* GEORADIUS key x y radius unit [WITHDIST] [WITHHASH] [WITHCOORD] [ASC|DESC] *                               [COUNT count] [STORE key] [STORedisT key] * GEORADIUSBYMEMBER key member radius unit ... options ... */</span><span class="token keyword">void</span> <span class="token function">georadiusGeneric</span><span class="token punctuation">(</span>client <span class="token operator">*</span>c<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span> <span class="token punctuation">{</span>    robj <span class="token operator">*</span>key <span class="token operator">=</span> c<span class="token operator">-&gt;</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    robj <span class="token operator">*</span>storekey <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> stoRedist <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">/* 0 for STORE, 1 for STORedisT. */</span><span class="token comment">//根据key获取有序集合</span>    robj <span class="token operator">*</span>zobj <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>zobj <span class="token operator">=</span> <span class="token function">lookupKeyReadOrReply</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> key<span class="token punctuation">,</span> shared<span class="token punctuation">.</span>null<span class="token punctuation">[</span>c<span class="token operator">-&gt;</span>resp<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span>        <span class="token function">checkType</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> zobj<span class="token punctuation">,</span> OBJ_ZSET<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">//根据用户输入（经纬度/member）确认中心点经纬度</span>    <span class="token keyword">int</span> base_args<span class="token punctuation">;</span>    <span class="token keyword">double</span> xy<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> RADIUS_COORDS<span class="token punctuation">)</span> <span class="token punctuation">{</span>……    <span class="token punctuation">}</span><span class="token comment">//获取查询范围距离</span>    <span class="token keyword">double</span> radius_meters <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> conversion <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>radius_meters <span class="token operator">=</span> <span class="token function">extractDistanceOrReply</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> c<span class="token operator">-&gt;</span>argv <span class="token operator">+</span> base_args <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">,</span>                                                <span class="token operator">&amp;</span>conversion<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">//获取可选参数 （withdist、withhash、withcoords、sort、count）</span>    <span class="token keyword">int</span> withdist <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> withhash <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> withcoords <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sort <span class="token operator">=</span> SORT_NONE<span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token operator">-&gt;</span>argc <span class="token operator">&gt;</span> base_args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span><span class="token comment">//获取 STORE 和 STORedisT 参数</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>storekey <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>withdist <span class="token operator">||</span> withhash <span class="token operator">||</span> withcoords<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">addReplyError</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>            <span class="token string">"STORE option in GEORADIUS is not compatible with "</span><span class="token string">"WITHDIST, WITHHASH and WITHCOORDS options"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">//设定排序</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> sort <span class="token operator">==</span> SORT_NONE<span class="token punctuation">)</span> sort <span class="token operator">=</span> SORT_ASC<span class="token punctuation">;</span><span class="token comment">//利用中心点和半径计算目标区域范围</span>    GeoHashRadius georadius <span class="token operator">=</span>        <span class="token function">geohashGetAreasByRadiusWGS84</span><span class="token punctuation">(</span>xy<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> xy<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> radius_meters<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//对中心点及其周围8个geohash网格区域进行查找，找出范围内元素对象</span>    geoArray <span class="token operator">*</span>ga <span class="token operator">=</span> <span class="token function">geoArrayCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">membersOfAllNeighbors</span><span class="token punctuation">(</span>zobj<span class="token punctuation">,</span> georadius<span class="token punctuation">,</span> xy<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> xy<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> radius_meters<span class="token punctuation">,</span> ga<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//未匹配返空</span>    <span class="token comment">/* If no matching results, the user gets an empty reply. */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ga<span class="token operator">-&gt;</span>used <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> storekey <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">addReplyNull</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">geoArrayFree</span><span class="token punctuation">(</span>ga<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">//一些返回值的设定和返回</span>    ……    <span class="token function">geoArrayFree</span><span class="token punctuation">(</span>ga<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上文代码中最核心的步骤有两个，一是“计算中心点范围”，二是“对中心点及其周围8个geohash网格区域进行查找”。对应的是<code>geohashGetAreasByRadiusWGS84</code>和<code>membersOfAllNeighbors</code>两个函数：</p><ul><li>计算中心点范围</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// geohash_helper.c</span>    GeoHashRadius <span class="token function">geohashGetAreasByRadiusWGS84</span><span class="token punctuation">(</span><span class="token keyword">double</span> longitude<span class="token punctuation">,</span> <span class="token keyword">double</span> latitude<span class="token punctuation">,</span>                                               <span class="token keyword">double</span> radius_meters<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">geohashGetAreasByRadius</span><span class="token punctuation">(</span>longitude<span class="token punctuation">,</span> latitude<span class="token punctuation">,</span> radius_meters<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">//返回能够覆盖目标区域范围的9个geohashBox</span>    GeoHashRadius <span class="token function">geohashGetAreasByRadius</span><span class="token punctuation">(</span><span class="token keyword">double</span> longitude<span class="token punctuation">,</span> <span class="token keyword">double</span> latitude<span class="token punctuation">,</span> <span class="token keyword">double</span> radius_meters<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//一些参数设置</span>        GeoHashRange long_range<span class="token punctuation">,</span> lat_range<span class="token punctuation">;</span>        GeoHashRadius radius<span class="token punctuation">;</span>        GeoHashBits hash<span class="token punctuation">;</span>        GeoHashNeighbors neighbors<span class="token punctuation">;</span>        GeoHashArea area<span class="token punctuation">;</span>        <span class="token keyword">double</span> min_lon<span class="token punctuation">,</span> max_lon<span class="token punctuation">,</span> min_lat<span class="token punctuation">,</span> max_lat<span class="token punctuation">;</span>        <span class="token keyword">double</span> bounds<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> steps<span class="token punctuation">;</span>        <span class="token comment">//计算目标区域外接矩形的经纬度范围（目标区域为：以目标经纬度为中心，半径为指定距离的圆）</span>        <span class="token function">geohashBoundingBox</span><span class="token punctuation">(</span>longitude<span class="token punctuation">,</span> latitude<span class="token punctuation">,</span> radius_meters<span class="token punctuation">,</span> bounds<span class="token punctuation">)</span><span class="token punctuation">;</span>        min_lon <span class="token operator">=</span> bounds<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        min_lat <span class="token operator">=</span> bounds<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        max_lon <span class="token operator">=</span> bounds<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        max_lat <span class="token operator">=</span> bounds<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//根据目标区域中心点纬度和半径，计算带查询的9个搜索框的geohash精度（位）</span>    <span class="token comment">//这里用到latitude主要是针对极地的情况对精度进行了一些调整（纬度越高，位数越小）</span>        steps <span class="token operator">=</span> <span class="token function">geohashEstimateStepsByRadius</span><span class="token punctuation">(</span>radius_meters<span class="token punctuation">,</span>latitude<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置经纬度最大最小值：-180&lt;=longitude&lt;=180, -85&lt;=latitude&lt;=85</span>        <span class="token function">geohashGetCoordRange</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>long_range<span class="token punctuation">,</span><span class="token operator">&amp;</span>lat_range<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//将待查经纬度按指定精度（steps）编码成geohash值</span>        <span class="token function">geohashEncode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>long_range<span class="token punctuation">,</span><span class="token operator">&amp;</span>lat_range<span class="token punctuation">,</span>longitude<span class="token punctuation">,</span>latitude<span class="token punctuation">,</span>steps<span class="token punctuation">,</span><span class="token operator">&amp;</span>hash<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//将geohash值在8个方向上进行扩充，确定周围8个Box（neighbors）</span>        <span class="token function">geohashNeighbors</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hash<span class="token punctuation">,</span><span class="token operator">&amp;</span>neighbors<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//根据hash值确定area经纬度范围</span>        <span class="token function">geohashDecode</span><span class="token punctuation">(</span>long_range<span class="token punctuation">,</span>lat_range<span class="token punctuation">,</span>hash<span class="token punctuation">,</span><span class="token operator">&amp;</span>area<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//一些特殊情况处理</span>        ……        <span class="token comment">//构建并返回结果</span>        radius<span class="token punctuation">.</span>hash <span class="token operator">=</span> hash<span class="token punctuation">;</span>        radius<span class="token punctuation">.</span>neighbors <span class="token operator">=</span> neighbors<span class="token punctuation">;</span>        radius<span class="token punctuation">.</span>area <span class="token operator">=</span> area<span class="token punctuation">;</span>        <span class="token keyword">return</span> radius<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>对中心点及其周围8个geohash网格区域进行查找</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// geo.c</span>    <span class="token comment">//在9个hashBox中获取想要的元素</span>    <span class="token keyword">int</span> <span class="token function">membersOfAllNeighbors</span><span class="token punctuation">(</span>robj <span class="token operator">*</span>zobj<span class="token punctuation">,</span> GeoHashRadius n<span class="token punctuation">,</span> <span class="token keyword">double</span> lon<span class="token punctuation">,</span> <span class="token keyword">double</span> lat<span class="token punctuation">,</span> <span class="token keyword">double</span> radius<span class="token punctuation">,</span> geoArray <span class="token operator">*</span>ga<span class="token punctuation">)</span> <span class="token punctuation">{</span>        GeoHashBits neighbors<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> last_processed <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> debugmsg <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">//获取9个搜索hashBox</span>        neighbors<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> n<span class="token punctuation">.</span>hash<span class="token punctuation">;</span>        ……        neighbors<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> n<span class="token punctuation">.</span>neighbors<span class="token punctuation">.</span>south_west<span class="token punctuation">;</span>        <span class="token comment">//在每个hashBox中搜索目标点</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>neighbors<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>neighbors<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">HASHISZERO</span><span class="token punctuation">(</span>neighbors<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>debugmsg<span class="token punctuation">)</span> <span class="token function">D</span><span class="token punctuation">(</span><span class="token string">"neighbors[%d] is zero"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token comment">//剔除可能的重复hashBox (搜索半径&gt;5000KM时可能出现)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>last_processed <span class="token operator">&amp;&amp;</span>                neighbors<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>bits <span class="token operator">==</span> neighbors<span class="token punctuation">[</span>last_processed<span class="token punctuation">]</span><span class="token punctuation">.</span>bits <span class="token operator">&amp;&amp;</span>                neighbors<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>step <span class="token operator">==</span> neighbors<span class="token punctuation">[</span>last_processed<span class="token punctuation">]</span><span class="token punctuation">.</span>step<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token comment">//搜索hashBox中满足条件的对象</span>            count <span class="token operator">+=</span> <span class="token function">membersOfGeoHashBox</span><span class="token punctuation">(</span>zobj<span class="token punctuation">,</span> neighbors<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> ga<span class="token punctuation">,</span> lon<span class="token punctuation">,</span> lat<span class="token punctuation">,</span> radius<span class="token punctuation">)</span><span class="token punctuation">;</span>            last_processed <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span>            <span class="token keyword">int</span> <span class="token function">membersOfGeoHashBox</span><span class="token punctuation">(</span>robj <span class="token operator">*</span>zobj<span class="token punctuation">,</span> GeoHashBits hash<span class="token punctuation">,</span> geoArray <span class="token operator">*</span>ga<span class="token punctuation">,</span> <span class="token keyword">double</span> lon<span class="token punctuation">,</span> <span class="token keyword">double</span> lat<span class="token punctuation">,</span> <span class="token keyword">double</span> radius<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//获取hashBox内的最大、最小geohash值（52位）</span>        GeoHashFix52Bits min<span class="token punctuation">,</span> max<span class="token punctuation">;</span>        <span class="token function">scoresOfGeoHashBox</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span><span class="token operator">&amp;</span>min<span class="token punctuation">,</span><span class="token operator">&amp;</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//根据最大、最小geohash值筛选zobj集合中满足条件的点</span>        <span class="token keyword">return</span> <span class="token function">geoGetPointsInRange</span><span class="token punctuation">(</span>zobj<span class="token punctuation">,</span> min<span class="token punctuation">,</span> max<span class="token punctuation">,</span> lon<span class="token punctuation">,</span> lat<span class="token punctuation">,</span> radius<span class="token punctuation">,</span> ga<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>            <span class="token keyword">int</span> <span class="token function">geoGetPointsInRange</span><span class="token punctuation">(</span>robj <span class="token operator">*</span>zobj<span class="token punctuation">,</span> <span class="token keyword">double</span> min<span class="token punctuation">,</span> <span class="token keyword">double</span> max<span class="token punctuation">,</span> <span class="token keyword">double</span> lon<span class="token punctuation">,</span> <span class="token keyword">double</span> lat<span class="token punctuation">,</span> <span class="token keyword">double</span> radius<span class="token punctuation">,</span> geoArray <span class="token operator">*</span>ga<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//搜索Range的参数边界设置（即9个hashBox其中一个的边界范围）</span>        zrangespec range <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span>min <span class="token operator">=</span> min<span class="token punctuation">,</span> <span class="token punctuation">.</span>max <span class="token operator">=</span> max<span class="token punctuation">,</span> <span class="token punctuation">.</span>minex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">.</span>maxex <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">size_t</span> origincount <span class="token operator">=</span> ga<span class="token operator">-&gt;</span>used<span class="token punctuation">;</span>        sds member<span class="token punctuation">;</span>        <span class="token comment">//搜索集合zobj可能有ZIPLIST和SKIPLIST两种编码方式，这里以SKIPLIST为例，逻辑是一样的</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>zobj<span class="token operator">-&gt;</span>encoding <span class="token operator">==</span> OBJ_ENCODING_ZIPLIST<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ……        <span class="token punctuation">}</span> <span class="token function">elseif</span> <span class="token punctuation">(</span>zobj<span class="token operator">-&gt;</span>encoding <span class="token operator">==</span> OBJ_ENCODING_SKIPLIST<span class="token punctuation">)</span> <span class="token punctuation">{</span>            zset <span class="token operator">*</span>zs <span class="token operator">=</span> zobj<span class="token operator">-&gt;</span>ptr<span class="token punctuation">;</span>            zskiplist <span class="token operator">*</span>zsl <span class="token operator">=</span> zs<span class="token operator">-&gt;</span>zsl<span class="token punctuation">;</span>            zskiplistNode <span class="token operator">*</span>ln<span class="token punctuation">;</span>        <span class="token comment">//获取在hashBox范围内的首个元素（跳表数据结构，效率可比拟于二叉查找树），没有则返0</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ln <span class="token operator">=</span> <span class="token function">zslFirstInRange</span><span class="token punctuation">(</span>zsl<span class="token punctuation">,</span> <span class="token operator">&amp;</span>range<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">/* Nothing exists starting at our min.  No results. */</span>                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token comment">//从首个元素开始遍历集合</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>ln<span class="token punctuation">)</span> <span class="token punctuation">{</span>                sds ele <span class="token operator">=</span> ln<span class="token operator">-&gt;</span>ele<span class="token punctuation">;</span>    <span class="token comment">//遍历元素超出range范围则break</span>                <span class="token comment">/* Abort when the node is no longer in range. */</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">zslValueLteMax</span><span class="token punctuation">(</span>ln<span class="token operator">-&gt;</span>score<span class="token punctuation">,</span> <span class="token operator">&amp;</span>range<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token comment">//元素校验（计算元素与中心点的距离）</span>                ele <span class="token operator">=</span> <span class="token function">sdsdup</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">geoAppendIfWithinRadius</span><span class="token punctuation">(</span>ga<span class="token punctuation">,</span>lon<span class="token punctuation">,</span>lat<span class="token punctuation">,</span>radius<span class="token punctuation">,</span>ln<span class="token operator">-&gt;</span>score<span class="token punctuation">,</span>ele<span class="token punctuation">)</span>                    <span class="token operator">==</span> C_ERR<span class="token punctuation">)</span> <span class="token function">sdsfree</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">;</span>                ln <span class="token operator">=</span> ln<span class="token operator">-&gt;</span>level<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>forward<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ga<span class="token operator">-&gt;</span>used <span class="token operator">-</span> origincount<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">int</span> <span class="token function">geoAppendIfWithinRadius</span><span class="token punctuation">(</span>geoArray <span class="token operator">*</span>ga<span class="token punctuation">,</span> <span class="token keyword">double</span> lon<span class="token punctuation">,</span> <span class="token keyword">double</span> lat<span class="token punctuation">,</span> <span class="token keyword">double</span> radius<span class="token punctuation">,</span> <span class="token keyword">double</span> score<span class="token punctuation">,</span> sds member<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">double</span> distance<span class="token punctuation">,</span> xy<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//解码错误, 返回error</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">decodeGeohash</span><span class="token punctuation">(</span>score<span class="token punctuation">,</span>xy<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> C_ERR<span class="token punctuation">;</span> <span class="token comment">/* Can't decode. */</span>        <span class="token comment">//最终距离校验(计算球面距离distance看是否小于radius)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">geohashGetDistanceIfInRadiusWGS84</span><span class="token punctuation">(</span>lon<span class="token punctuation">,</span>lat<span class="token punctuation">,</span> xy<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> xy<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                                               radius<span class="token punctuation">,</span> <span class="token operator">&amp;</span>distance<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> C_ERR<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//构建并返回满足条件的元素</span>        geoPoint <span class="token operator">*</span>gp <span class="token operator">=</span> <span class="token function">geoArrayAppend</span><span class="token punctuation">(</span>ga<span class="token punctuation">)</span><span class="token punctuation">;</span>        gp<span class="token operator">-&gt;</span>longitude <span class="token operator">=</span> xy<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        gp<span class="token operator">-&gt;</span>latitude <span class="token operator">=</span> xy<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        gp<span class="token operator">-&gt;</span>dist <span class="token operator">=</span> distance<span class="token punctuation">;</span>        gp<span class="token operator">-&gt;</span>member <span class="token operator">=</span> member<span class="token punctuation">;</span>        gp<span class="token operator">-&gt;</span>score <span class="token operator">=</span> score<span class="token punctuation">;</span>        <span class="token keyword">return</span> C_OK<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>GEORADIUS命令是主要是利用geoHash获取目标位置对象。</p><h5 id="georadius命令步骤总结："><a href="#georadius命令步骤总结：" class="headerlink" title="georadius命令步骤总结："></a>georadius命令步骤总结：</h5><ol><li>参数提取和校验；</li><li>利用中心点和输入半径计算待查区域范围。这个范围参数包括满足条件的最高的GeoHash网格等级(精度) 以及对应的能够覆盖目标区域的九宫格位置；</li><li>对九宫格进行遍历，根据每个GeoHash网格的范围框选出位置对象。进一步找出与中心点距离小于输入半径的对象，进行返回。</li></ol><h5 id="georadius命令步骤图解："><a href="#georadius命令步骤图解：" class="headerlink" title="georadius命令步骤图解："></a>georadius命令步骤图解：</h5><img src="https://babe-song.oss-cn-hangzhou.aliyuncs.com/images/202212161501237.png" alt="georadius命令步骤图解" style="zoom:50%;"><p>令左图的中心为搜索中心，绿色圆形区域为目标区域，所有点为待搜索的位置对象，红色点则为满足条件的位置对象。在实际搜索时，首先会根据搜索半径计算geohash网格等级（即右图中网格大小等级），并确定九宫格位置（即红色九宫格位置信息）；再依次查找计算九宫格中的点（蓝点和红点）与中心点的距离，最终筛选出距离范围内的点（红点）。</p><h5 id="ZADD命令"><a href="#ZADD命令" class="headerlink" title="ZADD命令"></a>ZADD命令</h5><p>Redis ZADD 命令用于将一个或多个成员元素及其分数值加入到Sorted Set，Sorted Set的底层实现是跳表：</p><img src="https://babe-song.oss-cn-hangzhou.aliyuncs.com/images/202212161501409.png" alt="跳表数据结构" style="zoom:50%;"><p>跳表拥有类似二叉查找树的查询效率，操作平均时间复杂性为O(log(N))。且最底层的所有元素都以链表的形式按序排列。geoadd通过调用ZADD命令将对象写入跳表，所以georadius在查询时，只要找到跳表中目标POI的geoHash的第一个值，后续依次对比即可，不用多次查找，再结合Redis本身基于内存的存储特性，<strong>GEO在实际使用过程中有非常高的运行效率</strong>。</p><p>通过上文的源码分析，可以了解到<strong>Redis GEO的实现主要是基于GeoHash。</strong></p><h4 id="GeoHash索引"><a href="#GeoHash索引" class="headerlink" title="GeoHash索引"></a>GeoHash索引</h4><h5 id="GeoHash简介"><a href="#GeoHash简介" class="headerlink" title="GeoHash简介"></a>GeoHash简介</h5><p>GeoHash是一种基于hash思想的空间索引，它将二维的经纬度转换成字符串，每个字符串对应一个矩形地理区域，该区域内的所有POI坐标都共享相同的GeoHash字符串；GeoHash字符串具有以下特点：第一，字符串越长，表示的范围越精确；第二，两个GeoHash字符串前缀相似度越高，两个地理区域越相近。</p><h5 id="GeoHash核心思想"><a href="#GeoHash核心思想" class="headerlink" title="GeoHash核心思想"></a>GeoHash核心思想</h5><ol><li>使用某种方法将二维空间点数据转换为一维数据，再建立索引；</li><li>利用hash算法单点查询速度快的思想建立索引；</li></ol><h5 id="GeoHash算法步骤"><a href="#GeoHash算法步骤" class="headerlink" title="GeoHash算法步骤"></a>GeoHash算法步骤</h5><ol><li><p>根据POI经纬度计算GeoHash的二进制编码</p><p>编码规则：对经纬度区间不断地进行二分细化，左区间取0，右区间取1，最终得到GeoHash的二进制编码；例如，计算西安交通大学兴庆校区（经度：108.962809，维度：34.262355）的GeoHash的二进制编码：</p><p>（1）经度编码</p><table><thead><tr><th align="center">bit</th><th align="center">min</th><th align="center">mid</th><th align="center">max</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">-180.000</td><td align="center">0.000</td><td align="center">180.000</td></tr><tr><td align="center">1</td><td align="center">0</td><td align="center">90.000</td><td align="center">180.000</td></tr><tr><td align="center">0</td><td align="center">90.000</td><td align="center">135.000</td><td align="center">180.000</td></tr><tr><td align="center">0</td><td align="center">90.000</td><td align="center">112.500</td><td align="center">135.000</td></tr><tr><td align="center">1</td><td align="center">90.000</td><td align="center">101.250</td><td align="center">112.500</td></tr><tr><td align="center">1</td><td align="center">101.250</td><td align="center">106.875</td><td align="center">112.500</td></tr><tr><td align="center">0</td><td align="center">106.875</td><td align="center">109.6875</td><td align="center">112.500</td></tr><tr><td align="center">1</td><td align="center">106.875</td><td align="center">108.28125</td><td align="center">109.6875</td></tr><tr><td align="center">0</td><td align="center">108.28125</td><td align="center">108.984375</td><td align="center">109.6875</td></tr><tr><td align="center">1</td><td align="center">108.28125</td><td align="center">108.6328125</td><td align="center">108.984375</td></tr></tbody></table><p>（2）纬度编码</p><table><thead><tr><th align="center">bit</th><th align="center">min</th><th align="center">mid</th><th align="center">max</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">-90.000</td><td align="center">0.000</td><td align="center">90.000</td></tr><tr><td align="center">0</td><td align="center">0.000</td><td align="center">45.000</td><td align="center">90.000</td></tr><tr><td align="center">1</td><td align="center">0.000</td><td align="center">22.500</td><td align="center">45.000</td></tr><tr><td align="center">0</td><td align="center">33.750</td><td align="center">39.375</td><td align="center">45.000</td></tr><tr><td align="center">0</td><td align="center">33.750</td><td align="center">36.5625</td><td align="center">39.375</td></tr><tr><td align="center">0</td><td align="center">33.750</td><td align="center">35.15625</td><td align="center">36.5625</td></tr><tr><td align="center">0</td><td align="center">33.750</td><td align="center">34.453125</td><td align="center">35.15625</td></tr><tr><td align="center">1</td><td align="center">33.750</td><td align="center">34.1015625</td><td align="center">34.453125</td></tr><tr><td align="center">0</td><td align="center">34.1015625</td><td align="center">34.27734375</td><td align="center">34.453125</td></tr><tr><td align="center">1</td><td align="center">34.1015625</td><td align="center">34.189453125</td><td align="center">34.27734375</td></tr></tbody></table><p>得到经度编码1100110101和纬度编码1010000101；可见，当两个POI的经度或纬度的二进制编码前缀越相似，说明两个POI的经度或纬度越接近。</p></li><li><p>将经度编码和纬度编码进行组合</p><img src="https://babe-song.oss-cn-hangzhou.aliyuncs.com/images/202212161501662.png" alt="经纬度编码组合" style="zoom: 32%;"><p>采用偶数位放经度，奇数位放纬度策略，交替选择经度编码和纬度编码组合成新的二进制编码：11100 10010 10010 10101</p><p>每四位二进制编码对应一位十进制编码，转换得到：28 18 18 21；因为坐标信息中的经度和纬度不是独立的，这种组合编码方式同时考虑了经度和纬度两个维度的因素。</p></li><li><p>将组码转换为Base32编码</p><p>Base32编码：Base系列字节编码为 ASCII 中的可见字符；Base32编码将字节编码为 ASCII 中的可见字符，将字节切为 5 个一组，每 5 个字节可以重组为 8 个字符。如果不够 5 个字节，那么就在切出的最后一组后边充 0，充够 5 位，然后右边充 =，充够 8组。例如：5个字节：00000001 00000011 00000111 00001111 00011111 切分为 00000 00100 00001 10000 01110 00011 11000 11111 每5个一组，重组为8组，每组对应一个字符，转换为十进制：0 4 1 16 14 3 24 31，查Base32字母表得到对应的字符串：AEBQODY7</p></li></ol><img src="https://babe-song.oss-cn-hangzhou.aliyuncs.com/images/202212161501599.png" alt="Base32字母表" style="zoom:50%;"><p>类似地，可以将GeoHash的十进制编码28 18 18 21转换为字符串4ssv，4ssv即为西安交通大学兴庆校区的GeoHash编码；可见，GeoHash编码字符串越长，POI的坐标精度越高，定位越准确。</p><img src="https://babe-song.oss-cn-hangzhou.aliyuncs.com/images/202212161501899.png" alt="geohash长度对应精度和误差" style="zoom:50%;"><p>由上表可见，当GeoHash编码长度为8时，精度在19米左右，而当编码长度为9时，精度在2米左右，编码长度需要根据具体的数据情况和实际的业务场景决定。</p><h5 id="GeoHash原理图解"><a href="#GeoHash原理图解" class="headerlink" title="GeoHash原理图解"></a>GeoHash原理图解</h5><p>GeoHash分别给经度和维度编码，然后将经纬度两串编码交叉组合成一串编码，这种编码方式在空间中的表示结果如下图所示。我们将二进制编码的结果填写到空间中，当将空间划分为四块时候，编码的顺序分别是左下角00，左上角01，右下脚10，右上角11，也就是类似于Z的曲线，当我们递归的将各个块分解成更小的子块时，编码的顺序是自相似的（分形），每一个子快也形成Z曲线，这种类型的曲线被称为Peano空间填充曲线。这种类型的空间填充曲线的优点是将二维空间转换成一维曲线（事实上是分形维），对大部分而言，编码相似的距离也相近。</p><p><img src="https://babe-song.oss-cn-hangzhou.aliyuncs.com/images/202212161501046.png" alt="GeoHash原理图解">　</p><p>GeoHash的0、1串序列是经度和纬度交替进行排列，偶数位对应的序列为经度序列，奇数位对应的序列为纬度序列，<strong>在进行第一次划分时，GeoHash0、1序列中的前5个bits（11100），那么这5bits中有3bits是表示经度，2bits表示纬度</strong>，所以第一次划分时，是将经度划分成8个区段（2^3 = 8），将纬度划分为4个区段（2^2 = 4），**这样就形成了32个区域(对应Base32)**。</p><img src="https://babe-song.oss-cn-hangzhou.aliyuncs.com/images/202212161501292.jpg" alt="geohash编码" style="zoom: 67%;"><p>这样，GeoHash就可以将整个地图或者是某个区域划分成32个区域：</p><img src="https://babe-song.oss-cn-hangzhou.aliyuncs.com/images/202212161501527.jpg" alt="geohash划分" style="zoom: 67%;"><p>然后随着编码序列长度的增加，再不断在区域内递归划分更小的区域；换句话说，geoHash编码长度越长，所覆盖的地理位置范围就越小：</p><img src="https://babe-song.oss-cn-hangzhou.aliyuncs.com/images/202212161501951.png" alt="geohash编码对应地理位置范围" style="zoom:50%;"><h5 id="GeoHash存在问题及解决方案"><a href="#GeoHash存在问题及解决方案" class="headerlink" title="GeoHash存在问题及解决方案"></a>GeoHash存在问题及解决方案</h5><ul><li><p>边缘问题</p><p>由于GeoHash是将区域划分为规则矩形，并对每个矩形进行编码，这样在查询附近POI信息时会导致下图中的<strong>边缘问题</strong>：比如红色的点是当前位置，绿色的两个点分别是附近的两个餐馆，但是在查询的时候会发现距离较远餐馆的GeoHash编码与我们一样（在同一个GeoHash区域），而较近餐馆的GeoHash编码与我们不一致；所以在查询时，除了使用当前位置的GeoHash编码进行匹配外，还使用周围8个区域的GeoHash编码，这样就可以避免边缘问题。</p><img src="https://babe-song.oss-cn-hangzhou.aliyuncs.com/images/202212161501234.png" alt="边缘问题" style="zoom:150%;"></li><li><p>突变问题</p><p>现有的GeoHash算法使用的是Peano空间填充曲线，Peano空间填充曲线最大的缺点就是突变性，有些编码相邻但距离却相差很远，比如0111与1000，编码是相邻的，但距离相差很大，导致了<strong>突变问题</strong>；因此在查询POI信息时，首先筛选GeoHash编码相似的POI点，然后进行实际距离计算。</p><img src="https://babe-song.oss-cn-hangzhou.aliyuncs.com/images/202212161501702.png" alt="突变问题" style="zoom:50%;"></li></ul><h5 id="GeoHash的代码实现"><a href="#GeoHash的代码实现" class="headerlink" title="GeoHash的代码实现"></a>GeoHash的代码实现</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">BitSet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GeoHash</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> <span class="token constant">MINLAT</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">90</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> <span class="token constant">MAXLAT</span> <span class="token operator">=</span> <span class="token number">90</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> <span class="token constant">MINLNG</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">180</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> <span class="token constant">MAXLNG</span> <span class="token operator">=</span> <span class="token number">180</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> numbits <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token comment">//经纬度单独编码长度</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">double</span> minLat<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">double</span> minLng<span class="token punctuation">;</span><span class="token comment">// Base32编码表</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> digits <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token char">'0'</span><span class="token punctuation">,</span> <span class="token char">'1'</span><span class="token punctuation">,</span> <span class="token char">'2'</span><span class="token punctuation">,</span> <span class="token char">'3'</span><span class="token punctuation">,</span> <span class="token char">'4'</span><span class="token punctuation">,</span> <span class="token char">'5'</span><span class="token punctuation">,</span> <span class="token char">'6'</span><span class="token punctuation">,</span> <span class="token char">'7'</span><span class="token punctuation">,</span> <span class="token char">'8'</span><span class="token punctuation">,</span>            <span class="token char">'9'</span><span class="token punctuation">,</span> <span class="token char">'b'</span><span class="token punctuation">,</span> <span class="token char">'c'</span><span class="token punctuation">,</span> <span class="token char">'d'</span><span class="token punctuation">,</span> <span class="token char">'e'</span><span class="token punctuation">,</span> <span class="token char">'f'</span><span class="token punctuation">,</span> <span class="token char">'g'</span><span class="token punctuation">,</span> <span class="token char">'h'</span><span class="token punctuation">,</span> <span class="token char">'j'</span><span class="token punctuation">,</span> <span class="token char">'k'</span><span class="token punctuation">,</span> <span class="token char">'m'</span><span class="token punctuation">,</span> <span class="token char">'n'</span><span class="token punctuation">,</span> <span class="token char">'p'</span><span class="token punctuation">,</span>            <span class="token char">'q'</span><span class="token punctuation">,</span> <span class="token char">'r'</span><span class="token punctuation">,</span> <span class="token char">'s'</span><span class="token punctuation">,</span> <span class="token char">'t'</span><span class="token punctuation">,</span> <span class="token char">'u'</span><span class="token punctuation">,</span> <span class="token char">'v'</span><span class="token punctuation">,</span> <span class="token char">'w'</span><span class="token punctuation">,</span> <span class="token char">'x'</span><span class="token punctuation">,</span> <span class="token char">'y'</span><span class="token punctuation">,</span> <span class="token char">'z'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment">// 定义编码映射关系</span>    <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> lookup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 初始化编码映射内容</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> digits<span class="token punctuation">)</span> <span class="token punctuation">{</span>            lookup<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">GeoHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setMinLatLng</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">encode</span><span class="token punctuation">(</span><span class="token keyword">double</span> lat<span class="token punctuation">,</span> <span class="token keyword">double</span> lon<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">BitSet</span> latbits <span class="token operator">=</span> <span class="token function">getBits</span><span class="token punctuation">(</span>lat<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BitSet</span> lonbits <span class="token operator">=</span> <span class="token function">getBits</span><span class="token punctuation">(</span>lon<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">180</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuilder</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numbits<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">(</span>lonbits<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token char">'1'</span> <span class="token operator">:</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 添加经度的编码</span>            buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">(</span>latbits<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token char">'1'</span> <span class="token operator">:</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 添加纬度的编码</span>        <span class="token punctuation">}</span>        <span class="token class-name">String</span> code <span class="token operator">=</span> <span class="token function">base32</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">return</span> code<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//根据经纬度和范围，获取对应的二进制</span>    <span class="token keyword">private</span> <span class="token class-name">BitSet</span> <span class="token function">getBits</span><span class="token punctuation">(</span><span class="token keyword">double</span> lat<span class="token punctuation">,</span> <span class="token keyword">double</span> floor<span class="token punctuation">,</span> <span class="token keyword">double</span> ceiling<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 指定初始大小为numbits</span>        <span class="token class-name">BitSet</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BitSet</span><span class="token punctuation">(</span>numbits<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numbits<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment">// 求二分法中间值</span>            <span class="token keyword">double</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>floor <span class="token operator">+</span> ceiling<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token comment">//大于中心值记为true</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lat <span class="token operator">&gt;=</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>                buffer<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将指定索引处的位设置为true。</span>                floor <span class="token operator">=</span> mid<span class="token punctuation">;</span>  <span class="token comment">// 区间设置为(mid,ceiling)</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                ceiling <span class="token operator">=</span> mid<span class="token punctuation">;</span><span class="token comment">// 区间设置为(floor,mid)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> buffer<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 将经纬度合并后的二进制进行指定的32位编码</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">base32</span><span class="token punctuation">(</span><span class="token keyword">long</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">65</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> charPos <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> negative <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>negative<span class="token punctuation">)</span> <span class="token punctuation">{</span>            i <span class="token operator">=</span> <span class="token operator">-</span>i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token operator">-</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 逆序赋值</span>            buf<span class="token punctuation">[</span>charPos<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> digits<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            i <span class="token operator">/=</span> <span class="token number">32</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        buf<span class="token punctuation">[</span>charPos<span class="token punctuation">]</span> <span class="token operator">=</span> digits<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>negative<span class="token punctuation">)</span> <span class="token punctuation">{</span>            buf<span class="token punctuation">[</span><span class="token operator">--</span>charPos<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'-'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token comment">// 从charPos开始，到65 - charPos开始解译</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> charPos<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">65</span> <span class="token operator">-</span> charPos<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setMinLatLng</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 计算经纬度的最小单元,最小的区间的中心值</span>        minLat <span class="token operator">=</span> <span class="token constant">MAXLAT</span> <span class="token operator">-</span> <span class="token constant">MINLAT</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numbits<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            minLat <span class="token operator">/=</span> <span class="token number">2.0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        minLng <span class="token operator">=</span> <span class="token constant">MAXLNG</span> <span class="token operator">-</span> <span class="token constant">MINLNG</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numbits<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            minLng <span class="token operator">/=</span> <span class="token number">2.0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 对编码后的字符串解码</span>    <span class="token keyword">public</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">decode</span><span class="token punctuation">(</span><span class="token class-name">String</span> geohash<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">StringBuilder</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> geohash<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> lookup<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">32</span><span class="token punctuation">;</span><span class="token comment">// 32的二进制为：100000，要让每位十进制数转为二进制时，都满五位，所以+32</span>            buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 去掉最高位，减32，还原数字</span>        <span class="token punctuation">}</span>        <span class="token class-name">BitSet</span> lonset <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BitSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BitSet</span> latset <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BitSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 偶数位，经度，从0开始，每次后移两位</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numbits <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">boolean</span> isSet <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> buffer<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                isSet <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">'1'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            lonset<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>j<span class="token operator">++</span><span class="token punctuation">,</span> isSet<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 奇数位，纬度，从1开始，每次后移两位</span>        j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numbits <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">boolean</span> isSet <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> buffer<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                isSet <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">'1'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            latset<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>j<span class="token operator">++</span><span class="token punctuation">,</span> isSet<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">double</span> lon <span class="token operator">=</span> <span class="token function">decode</span><span class="token punctuation">(</span>lonset<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">180</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> lat <span class="token operator">=</span> <span class="token function">decode</span><span class="token punctuation">(</span>latset<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>lat<span class="token punctuation">,</span> lon<span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 根据二进制和范围解码</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> <span class="token function">decode</span><span class="token punctuation">(</span><span class="token class-name">BitSet</span> bs<span class="token punctuation">,</span> <span class="token keyword">double</span> floor<span class="token punctuation">,</span> <span class="token keyword">double</span> ceiling<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">double</span> mid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bs<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 区间中心值</span>            mid <span class="token operator">=</span> <span class="token punctuation">(</span>floor <span class="token operator">+</span> ceiling<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>bs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                floor <span class="token operator">=</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                ceiling <span class="token operator">=</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> mid<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 查询该经纬度的GeoHash以及其周围的8个GeoHash点</span>    <span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getArroundGeoHash</span><span class="token punctuation">(</span><span class="token keyword">double</span> lat<span class="token punctuation">,</span> <span class="token keyword">double</span> lon<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> uplat <span class="token operator">=</span> lat <span class="token operator">+</span> minLat<span class="token punctuation">;</span>        <span class="token keyword">double</span> downLat <span class="token operator">=</span> lat <span class="token operator">-</span> minLat<span class="token punctuation">;</span>        <span class="token keyword">double</span> leftlng <span class="token operator">=</span> lon <span class="token operator">-</span> minLng<span class="token punctuation">;</span>        <span class="token keyword">double</span> rightLng <span class="token operator">=</span> lon <span class="token operator">+</span> minLng<span class="token punctuation">;</span>        <span class="token class-name">String</span> leftUp <span class="token operator">=</span> <span class="token function">encode</span><span class="token punctuation">(</span>uplat<span class="token punctuation">,</span> leftlng<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>leftUp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> leftMid <span class="token operator">=</span> <span class="token function">encode</span><span class="token punctuation">(</span>lat<span class="token punctuation">,</span> leftlng<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>leftMid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> leftDown <span class="token operator">=</span> <span class="token function">encode</span><span class="token punctuation">(</span>downLat<span class="token punctuation">,</span> leftlng<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>leftDown<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> midUp <span class="token operator">=</span> <span class="token function">encode</span><span class="token punctuation">(</span>uplat<span class="token punctuation">,</span> lon<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>midUp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> midMid <span class="token operator">=</span> <span class="token function">encode</span><span class="token punctuation">(</span>lat<span class="token punctuation">,</span> lon<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>midMid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> midDown <span class="token operator">=</span> <span class="token function">encode</span><span class="token punctuation">(</span>downLat<span class="token punctuation">,</span> lon<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>midDown<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> rightUp <span class="token operator">=</span> <span class="token function">encode</span><span class="token punctuation">(</span>uplat<span class="token punctuation">,</span> rightLng<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>rightUp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> rightMid <span class="token operator">=</span> <span class="token function">encode</span><span class="token punctuation">(</span>lat<span class="token punctuation">,</span> rightLng<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>rightMid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> rightDown <span class="token operator">=</span> <span class="token function">encode</span><span class="token punctuation">(</span>downLat<span class="token punctuation">,</span> rightLng<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>rightDown<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">GeoHash</span> geohash <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GeoHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 兴庆校区坐标</span>      <span class="token keyword">double</span> longitude <span class="token operator">=</span> <span class="token number">108.962809</span><span class="token punctuation">;</span>      <span class="token keyword">double</span> latitude <span class="token operator">=</span> <span class="token number">34.262355</span><span class="token punctuation">;</span>      <span class="token comment">// GeoHash编码</span>        <span class="token class-name">String</span>  geoHashCode <span class="token operator">=</span> geohash<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>latitude<span class="token punctuation">,</span> longitude<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>geoHashCode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> arroundGeoHash <span class="token operator">=</span> geohash<span class="token punctuation">.</span><span class="token function">getArroundGeoHash</span><span class="token punctuation">(</span>latitude<span class="token punctuation">,</span> longitude<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arroundGeoHash<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// GeoHash解码</span>        <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> geo <span class="token operator">=</span> geohash<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>geoHashCode<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>geo<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> geo<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="基于Redis的POI搜索实现"><a href="#基于Redis的POI搜索实现" class="headerlink" title="基于Redis的POI搜索实现"></a>基于Redis的POI搜索实现</h4><h5 id="爬取西安市POI数据"><a href="#爬取西安市POI数据" class="headerlink" title="爬取西安市POI数据"></a>爬取西安市POI数据</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> quote<span class="token keyword">from</span> urllib <span class="token keyword">import</span> request<span class="token keyword">import</span> json<span class="token keyword">import</span> xlwt<span class="token comment"># 根据城市名称和分类关键字获取poi数据</span><span class="token keyword">def</span> <span class="token function">getpois</span><span class="token punctuation">(</span>city<span class="token punctuation">,</span> keyword<span class="token punctuation">)</span><span class="token punctuation">:</span>    i <span class="token operator">=</span> <span class="token number">1</span>    poilist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>  <span class="token comment"># 使用while循环不断分页获取数据</span>        result <span class="token operator">=</span> getpoi_page<span class="token punctuation">(</span>city<span class="token punctuation">,</span> keyword<span class="token punctuation">,</span> i<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>        result <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>result<span class="token punctuation">)</span>  <span class="token comment"># 将字符串转换为json</span>        <span class="token keyword">if</span> result<span class="token punctuation">[</span><span class="token string">'count'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'0'</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>        <span class="token comment"># 将返回的poi数据装入集合</span>        pois <span class="token operator">=</span> result<span class="token punctuation">[</span><span class="token string">'pois'</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> poi <span class="token keyword">in</span> pois<span class="token punctuation">:</span>            poilist<span class="token punctuation">.</span>append<span class="token punctuation">(</span>poi<span class="token punctuation">)</span>        i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">return</span> poilist<span class="token comment"># 数据写入excel</span><span class="token keyword">def</span> <span class="token function">write_to_excel</span><span class="token punctuation">(</span>poilist<span class="token punctuation">,</span> cityname<span class="token punctuation">,</span> classfield<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 一个Workbook对象，这就相当于创建了一个Excel文件</span>    book <span class="token operator">=</span> xlwt<span class="token punctuation">.</span>Workbook<span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">,</span> style_compression<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    sheet <span class="token operator">=</span> book<span class="token punctuation">.</span>add_sheet<span class="token punctuation">(</span>classfield<span class="token punctuation">,</span> cell_overwrite_ok<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment"># 第一行(列标题)</span>    sheet_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'location'</span><span class="token punctuation">,</span> <span class="token string">'address'</span><span class="token punctuation">,</span> <span class="token string">'pname'</span><span class="token punctuation">,</span> <span class="token string">'type'</span><span class="token punctuation">,</span> <span class="token string">'typecode'</span><span class="token punctuation">,</span> <span class="token string">'cityname'</span><span class="token punctuation">,</span> <span class="token string">'citycode'</span><span class="token punctuation">,</span> <span class="token string">'adname'</span><span class="token punctuation">,</span>                  <span class="token string">'adcode'</span><span class="token punctuation">,</span> <span class="token string">'biz_ext'</span><span class="token punctuation">,</span> <span class="token string">'biz_type'</span><span class="token punctuation">,</span> <span class="token string">'photos'</span><span class="token punctuation">,</span> <span class="token string">'tel'</span><span class="token punctuation">,</span> <span class="token string">'shopid'</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>sheet_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        sheet<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> sheet_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>poilist<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 每一行写入</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token punctuation">(</span>sheet_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> sheet_list<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token keyword">in</span> poilist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                sheet<span class="token punctuation">.</span>write<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>poilist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>sheet_list<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                sheet<span class="token punctuation">.</span>write<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    <span class="token comment"># 最后，将以上操作保存到指定的Excel文件中</span>    book<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">r''</span> <span class="token operator">+</span> cityname <span class="token operator">+</span> <span class="token string">"_"</span> <span class="token operator">+</span> classfield <span class="token operator">+</span> <span class="token string">'.xls'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'save {}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>classfield<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 单页获取pois</span><span class="token keyword">def</span> <span class="token function">getpoi_page</span><span class="token punctuation">(</span>cityname<span class="token punctuation">,</span> keyword<span class="token punctuation">,</span> page<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span>    req_url <span class="token operator">=</span> poi_search_url <span class="token operator">+</span> <span class="token string">"?key="</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">'&amp;keywords='</span> <span class="token operator">+</span> quote<span class="token punctuation">(</span>        keyword<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'&amp;city='</span> <span class="token operator">+</span> quote<span class="token punctuation">(</span>cityname<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'&amp;citylimit=true'</span> <span class="token operator">+</span> <span class="token string">'&amp;offset=25'</span> <span class="token operator">+</span> <span class="token string">'&amp;page='</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>        page<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'&amp;output=json'</span>    <span class="token keyword">with</span> request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req_url<span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        data <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> data<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment"># POI搜索</span>    poi_search_url <span class="token operator">=</span> <span class="token string">"https://restapi.amap.com/v3/place/text"</span>    key <span class="token operator">=</span> <span class="token string">'调用高德地图API申请的key'</span>    keyword_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'餐饮服务'</span><span class="token punctuation">,</span> <span class="token string">'购物服务'</span><span class="token punctuation">,</span> <span class="token string">'生活服务'</span><span class="token punctuation">,</span> <span class="token string">'体育休闲服务'</span><span class="token punctuation">,</span> <span class="token string">'医疗保健服务'</span><span class="token punctuation">,</span> <span class="token string">'住宿服务'</span><span class="token punctuation">,</span> <span class="token string">'风景名胜'</span><span class="token punctuation">,</span> <span class="token string">'商务住宅'</span><span class="token punctuation">,</span> <span class="token string">'交通设施服务'</span><span class="token punctuation">,</span> <span class="token string">'科教文化服务'</span><span class="token punctuation">]</span>    city <span class="token operator">=</span> <span class="token string">'西安'</span>    <span class="token keyword">for</span> keyword <span class="token keyword">in</span> keyword_list<span class="token punctuation">:</span>        pois <span class="token operator">=</span> getpois<span class="token punctuation">(</span>city<span class="token punctuation">,</span> keyword<span class="token punctuation">)</span>        write_to_excel<span class="token punctuation">(</span>pois<span class="token punctuation">,</span> city<span class="token punctuation">,</span> keyword<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>餐饮服务类型部分POI数据展示：</p><img src="https://babe-song.oss-cn-hangzhou.aliyuncs.com/images/202212161501285.png" alt="餐饮服务类型部分POI数据" style="zoom: 50%;"><h5 id="将数据写入Redis"><a href="#将数据写入Redis" class="headerlink" title="将数据写入Redis"></a>将数据写入Redis</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">insert_pois</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>keyword_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        pois_info <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        pois_geo <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">'西安_'</span> <span class="token operator">+</span> keyword_list<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'.xls'</span><span class="token punctuation">)</span>        pois_str <span class="token operator">=</span> df<span class="token punctuation">.</span>to_json<span class="token punctuation">(</span>orient<span class="token operator">=</span><span class="token string">'records'</span><span class="token punctuation">,</span> force_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        pois_json <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>pois_str<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>pois_json<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            poi_json <span class="token operator">=</span> pois_json<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token comment"># ['id', 'location', 'name', 'address', 'pname', 'cityname', 'adname', 'type']</span>            poi_id <span class="token operator">=</span> poi_json<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span>            poi_name <span class="token operator">=</span> poi_json<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token keyword">if</span> poi_json<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span> <span class="token keyword">else</span> <span class="token string">''</span>            poi_location <span class="token operator">=</span> poi_json<span class="token punctuation">[</span><span class="token string">'location'</span><span class="token punctuation">]</span> <span class="token keyword">if</span> poi_json<span class="token punctuation">[</span><span class="token string">'location'</span><span class="token punctuation">]</span> <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span> <span class="token keyword">else</span> <span class="token string">''</span>            poi_pname <span class="token operator">=</span> poi_json<span class="token punctuation">[</span><span class="token string">'pname'</span><span class="token punctuation">]</span> <span class="token keyword">if</span> poi_json<span class="token punctuation">[</span><span class="token string">'pname'</span><span class="token punctuation">]</span> <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span> <span class="token keyword">else</span> <span class="token string">''</span>            poi_cityname <span class="token operator">=</span> poi_json<span class="token punctuation">[</span><span class="token string">'cityname'</span><span class="token punctuation">]</span> <span class="token keyword">if</span> poi_json<span class="token punctuation">[</span><span class="token string">'cityname'</span><span class="token punctuation">]</span> <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span> <span class="token keyword">else</span> <span class="token string">''</span>            poi_adname <span class="token operator">=</span> poi_json<span class="token punctuation">[</span><span class="token string">'adname'</span><span class="token punctuation">]</span> <span class="token keyword">if</span> poi_json<span class="token punctuation">[</span><span class="token string">'adname'</span><span class="token punctuation">]</span> <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span> <span class="token keyword">else</span> <span class="token string">''</span>            poi_address <span class="token operator">=</span> poi_pname <span class="token operator">+</span> poi_cityname <span class="token operator">+</span> poi_adname <span class="token operator">+</span> poi_json<span class="token punctuation">[</span>                <span class="token string">'address'</span><span class="token punctuation">]</span> <span class="token keyword">if</span> poi_json<span class="token punctuation">[</span><span class="token string">'address'</span><span class="token punctuation">]</span> <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span> <span class="token keyword">else</span> <span class="token string">''</span>            poi_type <span class="token operator">=</span> poi_json<span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span>            poi_info <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'id'</span><span class="token punctuation">:</span> poi_id<span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> poi_name<span class="token punctuation">,</span> <span class="token string">'location'</span><span class="token punctuation">:</span> poi_location<span class="token punctuation">,</span> <span class="token string">'address'</span><span class="token punctuation">:</span> poi_address<span class="token punctuation">,</span>                        <span class="token string">'poi_type'</span><span class="token punctuation">:</span> poi_type<span class="token punctuation">}</span>            pois_info<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span>poi_id<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">(</span>poi_info<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>            poi_location <span class="token operator">=</span> poi_location<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span>            pois_geo<span class="token punctuation">.</span>append<span class="token punctuation">(</span>poi_location<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            pois_geo<span class="token punctuation">.</span>append<span class="token punctuation">(</span>poi_location<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            pois_geo<span class="token punctuation">.</span>append<span class="token punctuation">(</span>poi_id<span class="token punctuation">)</span>        r<span class="token punctuation">.</span>geoadd<span class="token punctuation">(</span><span class="token string">'geo_'</span> <span class="token operator">+</span> key_list<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> pois_geo<span class="token punctuation">)</span>        r<span class="token punctuation">.</span>hmset<span class="token punctuation">(</span><span class="token string">'h_'</span> <span class="token operator">+</span> key_list<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> pois_info<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'insert {} successful'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>keyword_list<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>核心步骤：</p><ol><li>使用geoadd函数写入POI的id，经度和纬度</li><li>使用hmset函数写入POI的id和详细信息，如名称、地址等</li></ol><h5 id="搜索兴庆校区附近的POI"><a href="#搜索兴庆校区附近的POI" class="headerlink" title="搜索兴庆校区附近的POI"></a>搜索兴庆校区附近的POI</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_pois</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'catering'</span><span class="token punctuation">,</span> longitude<span class="token operator">=</span><span class="token number">108.962809</span><span class="token punctuation">,</span> latitude<span class="token operator">=</span><span class="token number">34.262355</span><span class="token punctuation">,</span> radius<span class="token operator">=</span><span class="token number">2000</span><span class="token punctuation">,</span> unit<span class="token operator">=</span><span class="token string">'m'</span><span class="token punctuation">,</span> withcoord<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>             withdist<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    pois_id <span class="token operator">=</span> r<span class="token punctuation">.</span>georadius<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'geo_'</span> <span class="token operator">+</span> name<span class="token punctuation">,</span> longitude<span class="token operator">=</span>longitude<span class="token punctuation">,</span> latitude<span class="token operator">=</span>latitude<span class="token punctuation">,</span> radius<span class="token operator">=</span>radius<span class="token punctuation">,</span> unit<span class="token operator">=</span>unit<span class="token punctuation">,</span>                          withcoord<span class="token operator">=</span>withcoord<span class="token punctuation">,</span>                          withdist<span class="token operator">=</span>withdist<span class="token punctuation">)</span>    id_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> poi <span class="token keyword">in</span> pois_id<span class="token punctuation">:</span>        id_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>poi<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    pois <span class="token operator">=</span> r<span class="token punctuation">.</span>hmget<span class="token punctuation">(</span><span class="token string">'h_'</span> <span class="token operator">+</span> name<span class="token punctuation">,</span> id_list<span class="token punctuation">)</span>    poi_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> poi <span class="token keyword">in</span> pois<span class="token punctuation">:</span>        poi_json <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>poi<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"\'"</span><span class="token punctuation">,</span> <span class="token string">"\""</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        poi_id <span class="token operator">=</span> poi_json<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> poi <span class="token keyword">in</span> pois_id<span class="token punctuation">:</span>            <span class="token keyword">if</span> poi_id <span class="token keyword">in</span> poi<span class="token punctuation">:</span>                <span class="token keyword">if</span> poi<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span> <span class="token keyword">and</span> poi<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">1000</span><span class="token punctuation">:</span>                    poi_json<span class="token punctuation">[</span><span class="token string">'dist'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">round</span><span class="token punctuation">(</span>poi<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>                    poi_json<span class="token punctuation">[</span><span class="token string">'unit'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'公里'</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    poi_json<span class="token punctuation">[</span><span class="token string">'dist'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">round</span><span class="token punctuation">(</span>poi<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                    poi_json<span class="token punctuation">[</span><span class="token string">'unit'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'米'</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        poi_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>poi_json<span class="token punctuation">)</span>    <span class="token keyword">return</span> poi_list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>核心步骤：</p><ol><li>使用georadius函数获取符合条件的POI的id</li><li>使用hmget函数根据POI的id获取对应POI的详细信息</li></ol><h5 id="POI搜索可视化"><a href="#POI搜索可视化" class="headerlink" title="POI搜索可视化"></a>POI搜索可视化</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">draw_map</span><span class="token punctuation">(</span>location<span class="token punctuation">,</span> pois<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># latitude, longitude</span>    location <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">reversed</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">)</span>    poi_map <span class="token operator">=</span> folium<span class="token punctuation">.</span>Map<span class="token punctuation">(</span>location<span class="token operator">=</span>location<span class="token punctuation">,</span> zoom_start<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">,</span> tiles<span class="token operator">=</span><span class="token string">'OpenStreetMap'</span><span class="token punctuation">)</span>  <span class="token comment"># 绘制地图，确定聚焦点</span>    <span class="token comment"># 绘制当前位置</span>    folium<span class="token punctuation">.</span>Marker<span class="token punctuation">(</span>location<span class="token punctuation">,</span> tooltip<span class="token operator">=</span><span class="token string">'当前位置'</span><span class="token punctuation">,</span> icon<span class="token operator">=</span>folium<span class="token punctuation">.</span>Icon<span class="token punctuation">(</span>color<span class="token operator">=</span><span class="token string">'green'</span><span class="token punctuation">,</span> icon<span class="token operator">=</span><span class="token string">'circle'</span><span class="token punctuation">,</span> prefix<span class="token operator">=</span><span class="token string">'fa'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>add_to<span class="token punctuation">(</span>poi_map<span class="token punctuation">)</span>    <span class="token comment"># 绘制poi</span>    <span class="token keyword">for</span> poi <span class="token keyword">in</span> pois<span class="token punctuation">:</span>        poi_location <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">reversed</span><span class="token punctuation">(</span>poi<span class="token punctuation">[</span><span class="token string">'location'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        folium<span class="token punctuation">.</span>Marker<span class="token punctuation">(</span>poi_location<span class="token punctuation">,</span> tooltip<span class="token operator">=</span>poi<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'&lt;br&gt;'</span> <span class="token operator">+</span> poi<span class="token punctuation">[</span><span class="token string">'address'</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'&lt;br&gt;距你'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>poi<span class="token punctuation">[</span><span class="token string">'dist'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> poi<span class="token punctuation">[</span><span class="token string">'unit'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                      icon<span class="token operator">=</span>folium<span class="token punctuation">.</span>Icon<span class="token punctuation">(</span>color<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">,</span> icon<span class="token operator">=</span><span class="token string">'circle'</span><span class="token punctuation">,</span> prefix<span class="token operator">=</span><span class="token string">'fa'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>add_to<span class="token punctuation">(</span>            poi_map<span class="token punctuation">)</span>    poi_map<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'map.html'</span><span class="token punctuation">)</span>    webbrowser<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'map.html'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可视化结果：</p><img src="https://babe-song.oss-cn-hangzhou.aliyuncs.com/images/202212161501654.png" alt="POI查询结果可视化" style="zoom:30%;"><p>图中绿色标记点为西安交通大学兴庆校区，红色标记点为兴庆校区2公里以内的餐饮服务；当该范围内POI信息无法满足需求时，可以进一步扩大查询范围（5公里以内）：</p><img src="https://babe-song.oss-cn-hangzhou.aliyuncs.com/images/202212161502770.png" alt="POI查询结果可视化" style="zoom:30%;">]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 研发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>西安防疫一码通平台的故障分析及优化设计报告</title>
      <link href="/2021/12/30/xi-an-fang-yi-yi-ma-tong-ping-tai-de-gu-zhang-fen-xi-ji-you-hua-she-ji-bao-gao/"/>
      <url>/2021/12/30/xi-an-fang-yi-yi-ma-tong-ping-tai-de-gu-zhang-fen-xi-ji-you-hua-she-ji-bao-gao/</url>
      
        <content type="html"><![CDATA[<h2 id="西安防疫一码通平台的故障分析及优化设计"><a href="#西安防疫一码通平台的故障分析及优化设计" class="headerlink" title="西安防疫一码通平台的故障分析及优化设计"></a>西安防疫一码通平台的故障分析及优化设计</h2><h4 id="事件背景"><a href="#事件背景" class="headerlink" title="事件背景"></a>事件背景</h4><p>2021年12月中旬，西安疫情爆发，西安政府根据疫情防控形势，要求西安公共场所加大了扫码查验力度，同时开展多轮全员核酸检测，西安一码通使用需求激增。12月20日，西安市要求市民上班需持48小时内核酸检测阴性报告，该政策进一步将西安一码通的高使用频率集中在某一个时间点，该日早上7:40分左右，西安一码通用户访问量激增，每秒访问量达到以往峰值的10倍以上，最终致使包括一码通在内的部分应用系统不可用。</p><img src="https://babe-song.oss-cn-hangzhou.aliyuncs.com/images/202212161419924.jpeg" alt="西安市个人电子识别码" style="zoom: 33%;"><p>2022年1月4日上午，西安一码通再次因为平台访问量过大，系统无法正常展码，严重影响了防疫期间的核酸检测工作。</p><img src="https://babe-song.oss-cn-hangzhou.aliyuncs.com/images/202212161419926.png" alt="陕西发布" style="zoom: 33%;"><p>整起事件总而言之，西安一码通在面对千万级别的访问量，半个月内出现了两次系统故障。</p><h4 id="故障原因"><a href="#故障原因" class="headerlink" title="故障原因"></a>故障原因</h4><ul><li><p><strong>直接原因</strong></p><p>因防疫需求激增的系统访问量，超过系统预期可承载的吞吐量。</p></li><li><p><strong>最终原因</strong></p><p>官方公布：因流量过载、系统架构应对高并发不足，最终导致<strong>防火墙拦截数据</strong>无法返回的系统性故障。</p></li><li><p><strong>根本原因</strong></p><p><strong>第一次系统故障</strong>：（1）系统架构设计初期对系统的并发量的误判，没有足够的前瞻性；（2）疫情突如其来，系统上线是燃眉之急，导致系统架构设计考虑不够周全，没有充分的时间去做好应对高并发的准备和预案；所以，激增的访问量导致了第一次系统故障。</p><p><strong>第二次系统故障</strong>：（1）开发和运维人员为了尽快修复故障，只能采取一些治标不治本的方法（协调资源、扩容和限流等），但是缺乏高可用设计的系统架构，投入再多的资源也没有办法被高效利用，根本性的问题没有得到解决，所以系统很快就出现了第二次崩溃；（2）第一次系统故障的修复工作是紧急的系统需求变更，工作人员在处理故障后没有能够做好回归测试，导致系统产生了新的漏洞，该漏洞导致了第二次系统故障。</p><p>总而言之，西安一码通故障的根本原因是<strong>系统不具备高并发下的高可用性</strong>；据数据显示，西安一码通注册用户达到4695.2万人，日均扫码量超800万人次，系统的主要需求是用户数据的读写；也就是说，西安一码通应当是一个<strong>在面对千万级别数据读写的高并发访问量下仍能保证关键服务高可用的系统。</strong></p></li></ul><h4 id="系统架构"><a href="#系统架构" class="headerlink" title="系统架构"></a>系统架构</h4><p>根据官方公布的公示信息统计，西安一码通系统由多家企业共同搭建，主要包括阿里云提供政务云和短信服务；西安东软系统集成有限公司提供软件开发和运营维护服务；安恒信息技术股份有限公司提供部分安全项目服务；美林数据股份有限公司提供引擎软件产品及相关服务；中译语通科技（陕西）有限公司提供大数据可视化服务；而在政务云平台中，北京启明星辰信息安全技术有限公司提供部分网络安全服务；阿里云提供政务云平台的私有云建设服务等。结合调研结果、相关领域技术人员的看法、自身使用体会和基于专业知识水平的分析，认为西安一码通的整体系统架构如下：</p><p><img src="https://babe-song.oss-cn-hangzhou.aliyuncs.com/images/202212161419936.png" alt="系统架构"></p><p>如上图所示，西安一码通系统可以认为是一种更加偏向于Browser/Server的架构，即浏览器/服务器端架构，是由微信小程序或者Browser客户端、Web应用服务器端和数据库端构成所谓的三层架构；其客户端主要依托在微信小程序或者是Web浏览器等程序，主要负责界面展示、数据可视化和部分简单业务逻辑处理等；服务器端依托在阿里政务云上，主要负责核心业务逻辑的处理；客户端与服务器端的交互是请求-响应模式，即客户端向服务器端发送读写请求，服务器端接收请求后与数据库端进行交互，最终响应客户端的请求。</p><h4 id="优化设计"><a href="#优化设计" class="headerlink" title="优化设计"></a>优化设计</h4><p>通过前文对西安一码通系统架构的分析，可以将系统拆解为以下部分：前端、接入层、后端、后端与数据库交互层、数据库端，可以使用一些常用的高并发设计对各部分进行优化，从而提高整个系统的性能和可用性。</p><ul><li><p><strong>负载均衡</strong></p><p>负载均衡主要是指将大量的作业请求或者其他形式的负载合理地分配到多个操作单元上执行；负载均衡策略具有以下好处：（1）带有负载平衡的多个冗余组件取代单一组件，可以提高系统的可靠性和可用性；（2）避免集群中部分服务器压力过大，另一些服务器比较空闲，可以优化资源使用、避免系统过载；（3）合理的负载均衡策略可以最大化系统的吞吐率、最小化响应时间，解决互联网架构中的高并发的问题。常见的负载均衡系统有：（1）DNS负载均衡：DNS 负载均衡的本质是：<strong>DNS 解析同一个域名可以返回不同的 IP 地址</strong>，实现地理级别的负载均衡；（2）硬件负载均衡：通过单独的硬件设备来实现负载均衡功能，这类设备和路由器、交换机类似，可以理解为一个用于负载均衡的基础网络设备；（3）软件负载均衡：通过负载均衡软件来实现负载均衡功能，常见的有 Nginx 和 LVS。</p><p>因为西安一码通的服务器端是依托在阿里政务云上，阿里云是完全具备实现以上三种负载均衡系统的条件，所以在成本条件允许的情况下，系统可以实现三层的负载均衡：</p><img src="https://babe-song.oss-cn-hangzhou.aliyuncs.com/images/202212161419937.png" alt="负载均衡" style="zoom: 40%;"><p>此外，西安一码通对并发和实时性要求较高的需求是<strong>用户个人健康信息查询</strong>的读请求，而像<strong>用户个人行程记录、用户核酸检测结果同步</strong>的写请求对实时性的要求不高，并且并发量不大，所以系统的数据库端可以使用读写分离架构实现负载均衡，将系统的数据访问压力分担到数据库集群的多个节点，主库负责写请求，从库负责读请求，通过主从复制同步数据，在这个过程中数据只需要保证最终一致性即可，基本上不会损耗系统的可用性：</p><img src="https://babe-song.oss-cn-hangzhou.aliyuncs.com/images/202212161419941.png" alt="读写分离" style="zoom:40%;"></li><li><p>缓存机制</p><p>缓存就是数据交换的缓冲区，将经常被访问的数据复制到应用程序附近的快速存储，可以在很大程度上降低整个系统的网络请求和IO传输，加速访问。提高系统的性能。</p><p>西安一码通整个系统架构可以在多处使用缓存提高系统性能。应用层的微信小程序提供数据缓存的函数接口，开发人员使用得当的话，可以将部分数据缓存在用户本地，实现零传输成本。</p><p><img src="https://babe-song.oss-cn-hangzhou.aliyuncs.com/images/202212161419940.png" alt="微信小程序数据缓存函数"></p><p>对于前端所需要的一些HTML/CSS文件和图片等其它类型的静态资源，可以使用CDN（Content Delivery Network，内容分发网络）管理，加速访问的同时可以节省骨干网络带宽，减少网络拥塞，避免业务服务器过载。</p><img src="https://babe-song.oss-cn-hangzhou.aliyuncs.com/images/202212161419003.png" alt="CDN" style="zoom:50%;"><p>疫情期间，西安一码通有大量的读写请求，如果这些请求全部都需要访问数据库，会带来巨大的IO，而且展码之类的读请求也是无法忍受高延迟，为了加速访问，可以在系统后端和数据库端中引入缓存机制。</p><p>目前主流的服务器端在业务实现上还是以Java为主，服务器端可以根据HashMap自定义实现本地缓存或者基于Guava Cache实现本地缓存，此类缓存的实现较为简单，适用于一些比较简单的业务场景，用于存储少量的静态对象等。</p><p>西安一码通注册用户接近5000万人，日均扫码量超800万人次，用户数据主要包括基本个人信息、一码通信息、状态信息等，数据以文本为主，所以每个用户需要的缓存量在10KB以内，则总的缓存容量至少要在100GB以上，可以考虑使用分布式缓存集群，如Redis的Cluster模式：</p><img src="https://babe-song.oss-cn-hangzhou.aliyuncs.com/images/202212161419011.png" alt="Redis的Cluster模式" style="zoom: 67%;"><p>分布式缓存集群不仅可以提供更大缓存容量，并且在对数据合理分片后以及设计合理的路由算法，亦可以实现负载均衡，同时将数据的访问速度降低到毫秒级别，对系统的性能有很大的提升。此外，分布式缓存数据通过异步复制，不能保证数据的强一致性，需要在服务层的业务逻辑实现中保证实时性数据的一致性或者是使用额外数据访问中间件。</p></li><li><p>服务拆分</p><p>西安一码通属于一个中大型系统，对系统服务模块化拆分（权限、用户、业务等）可以让系统运行得更加稳定。在高并发场景下，通过熔断策略保证非核心业务不正常的情况下，主要业务流程不受影响。例如从西安一码通拆分出核酸报告和个人电子码等多个子服务，这样即使核酸报告服务故障，依然能保证个人电子码的正常访问，实现故障隔离，也便于工作人员定位故障发生点。服务拆分后，每个服务都要有自己的数据库了，即使其他服务的数据库挂了，也不会影响到自己的数据库的正常运行，避免数据库单点故障问题，提高系统的稳定性。</p><img src="https://babe-song.oss-cn-hangzhou.aliyuncs.com/images/202212161419424.png" alt="服务拆分" style="zoom:50%;"><p>服务拆分后，网关鉴权这类的服务，会被其他不同模块依赖的服务，即每个用户都需要登录后才能查询电子码、核酸结果等的信息。可以将该类服务独立出来，在系统的接入层进行统一的认证鉴权，一旦进入网关，服务之间的调用就是可信的，且只需要一次登录即可访问所有子服务。</p><img src="https://babe-song.oss-cn-hangzhou.aliyuncs.com/images/202212161419502.png" alt="单点登录" style="zoom:50%;"><p>另外对于拆分后的分布式系统中，可以考虑使用二进制的 RPC 协议来代替传统的 HTTPS + JSON 格式的协议来实现子服务之间的调用，减少了网络开销、提高速度。</p></li><li><p>性能优化</p><p>西安一码通系统服务端可能需要某些客户端请求做一些附属的事情，如根据用户的位置信息生成行程记录，但这些事情用户并不需要立即取得这些事情的处理结果。在核酸检测的高峰期，这种情况就比较适合用异步的方式处理，通常会引入消息队列实现异步，此外消息队列也具有限流削峰的效果，防止系统过载宕机，此前的西安一码通就是由于未能做好限流处理，导致高并发下的流量触发了系统的过载保护，拒绝了客户端的请求，造成关键服务不可用。</p><img src="https://babe-song.oss-cn-hangzhou.aliyuncs.com/images/202212161419680.png" alt="消息队列解耦" style="zoom: 67%;"></li><li><p>过载保护</p><p>即使是系统具备应对高并发的能力，也要做好过载预防，防患于未然。系统过载可能导致服务器宕机，系统设计时要尽可能预防过载，并且要考虑过载发生时如何尽可能不让系统发生性能雪崩：（1）流量控制：限制系统的最大并发连接数，避免过载；（2）重试频率控制，系统过载时，由于请求发生延时，前端通常会发起重试，如果重试频率过大，则必然造成服务器雪崩；因此可以通过限制请求的访问频率，避免过载或服务器雪崩；（3）服务降级，在系统过载时，快速拒绝非核心业务的服务请求，或者提供降级处理方案；（4）监控报警，提前在代码中埋点，监控系统自身状态，当系统负载达到警戒值时，系统除了自身要采取相应措施外，还应该反馈给服务器端、客户端以及相关的负责人员。</p></li><li><p>体验优化</p><p>当系统变慢或者异常的时候，需要安抚用户的情绪，所以要在客户端进行一些用户体验优化的设计，比如（1）增加客户端的数据缓存；（2）用户急速操作时不要频繁提交请求，而是友好地提示用户稍后再试等。</p></li><li><p>系统监控</p><p>系统监控是提高故障处理能力和保障服务质量必需的一环。合理地使用系统监控可以收集到许多有效信息，为故障排查提供有力依据，还能及时发现系统潜在问题和错误。</p></li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>西安防疫一码通平台故障的根本原因现有的系统架构不足以支撑千万级别的高并发流量。可以通过负载均衡、缓存引入和服务拆分等方式进行优化系统，提高系统的可用性。在实际的项目中，通常是以最低的成本换取最大的系统性能，所以需要在项目开展初期做好需求分析，提出良好的系统设计方案，在控制成本和满足需求之间做出平衡。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 研发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高并发 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
